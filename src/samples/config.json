{
  "sampleRouteMapping": {
    "1": "/simple-chart",
    "2": "/simple-timeseries",
    "3": "/column-time-axis",
    "4": "/area-time-axis",
    "5": "/3d-pie-chart",
    "6": "/simple-gauge",
    "7": "/column-line-area-combi-chart",
    "8": "/column-chart-time-axis",
    "9": "/multi-series-time-axis",
    "10": "/multivariate-timeseries",
    "11": "/fetch-data-from-json-url",
    "12": "/fetch-data-from-xml-url",
    "13": "/update-chart-data",
    "14": "/update-chart-attributes",
    "15": "/trigger-events-from-chart",
    "16": "/percentage-calculation",
    "17": "/drill-down",
    "18": "/adding-reference-line",
    "19": "/annotating-data",
    "20": "/single-event-overlay",
    "21": "/date-event-overlay",
    "22": "/world-map",
    "23": "/export-charts",
    "24": "/special-events",
    "25": "/lifecycle-events",
    "26": "/dynamic-event-listening",
    "27": "/slice-data-plots",
    "28": "/responsive-charts",
    "29": "/change-chart-type-runtime",
    "30": "/use-annotations",
    "31": "/update-chart-attribute-through-method",
    "32": "/apply-theme",
    "33": "/interactive-candlestick-chart"
  },
  "wrapperSampleMapping": {
    "react-fc": []
  },
  "sampleProps": {
    "1": {
      "type": "FusionCharts",
      "title": "A Simple Chart",
      "desc": "A simple chart with all data embedded into the directive",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/WowAFPmmvAzx4DP29M3K/"
      },
      "directory": "simple-chart",
      "className": "SimpleColumnChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return <ReactFC {...chartConfigs} />;\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\r\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "2": {
      "type": "FusionTime",
      "title": "A Simple TimeSeries",
      "desc": "A simple time-series chart with a single series plotted as line",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/WowAFPmmvAzx4DP29M3K/"
      },
      "directory": "simple-timeseries",
      "className": "SimpleTimeseries",
      "dataurl": "https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/master/assets/datasources/fusiontime/online-sales-single-series-area-data-plot/data.json",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/master/assets/datasources/fusiontime/online-sales-single-series-area-data-plot/data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/master/assets/datasources/fusiontime/online-sales-single-series-area-data-plot/schema.json'\n).then(jsonify);\n\nclass SimpleTimeseries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: { text: 'Online Sales of a SuperStore in the US' },\n          // Initially data is set as null\n          data: null,\n          yAxis: [\n            {\n              plot: [\n                {\n                  value: 'Sales ($)'\n                }\n              ]\n            }\n          ]\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // After that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default SimpleTimeseries;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://raw.githubusercontent.com/fusioncharts/dev_centre_docs/master/assets/datasources/fusiontime/online-sales-single-series-area-data-plot/data.json\n[\n  [\n      \"United States\",\n      \"1/4/2011\",\n      16.448\n  ],\n  [\n      \"United States\",\n      \"1/5/2011\",\n      272.736\n  ],\n  [\n      \"United States\",\n      \"1/5/2011\",\n      11.784\n  ],\n  [\n      \"United States\",\n      \"1/5/2011\",\n      3.54\n  ],\n  [\n      \"United States\",\n      \"1/6/2011\",\n      19.536\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      2573.82\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      609.98\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      391.98\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      755.96\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      19.44\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      12.78\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      31.12\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      6.54\n  ],\n  [\n      \"United States\",\n      \"1/7/2011\",\n      5.48\n  ],\n  [\n      \"United States\",\n      \"1/8/2011\",\n      76.728\n  ],\n  [\n      \"United States\",\n      \"1/8/2011\",\n      10.43\n  ],\n  [\n      \"United States\",\n      \"1/10/2011\",\n      31.2\n  ],\n  [\n      \"United States\",\n      \"1/10/2011\",\n      9.344\n  ],\n  [\n      \"United States\",\n      \"1/11/2011\",\n      51.94\n  ],\n  [\n      \"United States\",\n      \"1/11/2011\",\n      2.89\n  ],\n  [\n      \"United States\",\n      \"1/12/2011\",\n      9.94\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      1325.85\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      572.58\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      646.74\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      545.94\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      333.999\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      50.94\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      19.9\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      11.36\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      37.408\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      5.64\n  ],\n  [\n      \"United States\",\n      \"1/14/2011\",\n      3.438\n  ],\n  [\n      \"United States\",\n      \"1/15/2011\",\n      61.96\n  ],\n  [\n      \"United States\",\n      \"1/16/2011\",\n      149.95\n  ],\n  [\n      \"United States\",\n      \"1/17/2011\",\n      127.104\n  ],\n  [\n      \"United States\",\n      \"1/17/2011\",\n      124.2\n  ],\n  [\n      \"United States\",\n      \"1/17/2011\",\n      30.072\n  ],\n  [\n      \"United States\",\n      \"1/17/2011\",\n      18.588\n  ],\n  [\n      \"United States\",\n      \"1/19/2011\",\n      64.864\n  ],\n  [\n      \"United States\",\n      \"1/20/2011\",\n      181.47\n  ],\n  [\n      \"United States\",\n      \"1/20/2011\",\n      56.064\n  ],\n  [\n      \"United States\",\n      \"1/20/2011\",\n      108.72\n  ],\n  [\n      \"United States\",\n      \"1/20/2011\",\n      32.34\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      1067.94\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      699.93\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      272.94\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      247.716\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      66.58\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      43.92\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      67.194\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      23.34\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      38.6\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      29.7\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      22.96\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      19.05\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      13.98\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      19.36\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      14.73\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      19.3\n  ],\n  [\n      \"United States\",\n      \"1/21/2011\",\n      6.63\n  ],\n  [\n      \"United States\",\n      \"1/22/2011\",\n      25.248\n  ],\n  [\n      \"United States\",\n      \"1/24/2011\",\n      40.08\n  ],\n  [\n      \"United States\",\n      \"1/24/2011\",\n      5.94\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      141.96\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      489.92\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      187.98\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      155.35\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      62.82\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      19.44\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      10.68\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      16.68\n  ],\n  [\n      \"United States\",\n      \"1/27/2011\",\n      12.42\n  ],\n  [\n      \"United States\",\n      \"1/28/2011\",\n      333\n  ],\n  [\n      \"United States\",\n      \"1/28/2011\",\n      57.23\n  ],\n  [\n      \"United States\",\n      \"1/28/2011\",\n      36.44\n  ],\n  [\n      \"United States\",\n      \"1/29/2011\",\n      3.928\n  ],\n  [\n      \"United States\",\n      \"1/31/2011\",\n      229.94\n  ],\n  [\n      \"United States\",\n      \"1/31/2011\",\n      10.56\n  ],\n  [\n      \"United States\",\n      \"2/1/2011\",\n      290.666\n  ],\n  [\n      \"United States\",\n      \"2/2/2011\",\n      468.9\n  ],\n  [\n      \"United States\",\n      \"2/3/2011\",\n      180.96\n  ],\n  [\n      \"United States\",\n      \"2/3/2011\",\n      18.336\n  ],\n  [\n      \"United States\",\n      \"2/3/2011\",\n      12.35\n  ],\n  [\n      \"United States\",\n      \"2/4/2011\",\n      83.84\n  ],\n  [\n      \"United States\",\n      \"2/4/2011\",\n      13.272\n  ],\n  [\n      \"United States\",\n      \"2/5/2011\",\n      17.248\n  ],\n  [\n      \"United States\",\n      \"2/5/2011\",\n      34.24\n  ],\n  [\n      \"United States\",\n      \"2/5/2011\",\n      82.896\n  ],\n  [\n      \"United States\",\n      \"2/7/2011\",\n      144.95\n  ],\n  [\n      \"United States\",\n      \"2/7/2011\",\n      161.61\n  ],\n  [\n      \"United States\",\n      \"2/7/2011\",\n      15\n  ],\n  [\n      \"United States\",\n      \"2/7/2011\",\n      8.952\n  ],\n  [\n      \"United States\",\n      \"2/8/2011\",\n      64.96\n  ],\n  [\n      \"United States\",\n      \"2/8/2011\",\n      115.36\n  ],\n  [\n      \"United States\",\n      \"2/9/2011\",\n      14.56\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      1256.22\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      234.45\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      332.94\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      60.89\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      64.96\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      51.9\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      17.46\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      14.94\n  ],\n  [\n      \"United States\",\n      \"2/12/2011\",\n      9.64\n  ],\n  [\n      \"United States\",\n      \"2/13/2011\",\n      129.568\n  ],\n  [\n      \"United States\",\n      \"2/15/2011\",\n      238.62\n  ],\n  [\n      \"United States\",\n      \"2/15/2011\",\n      239.97\n  ],\n  [\n      \"United States\",\n      \"2/15/2011\",\n      81.96\n  ],\n  [\n      \"United States\",\n      \"2/15/2011\",\n      16.176\n  ],\n  [\n      \"United States\",\n      \"2/16/2011\",\n      21.36\n  ],\n  [\n      \"United States\",\n      \"2/17/2011\",\n      7.96\n  ],\n  [\n      \"United States\",\n      \"2/17/2011\",\n      1.08\n  ],\n  [\n      \"United States\",\n      \"2/18/2011\",\n      54.208\n  ],\n  [\n      \"United States\",\n      \"2/19/2011\",\n      25.16\n  ],\n  [\n      \"United States\",\n      \"2/19/2011\",\n      12.624\n  ],\n  [\n      \"United States\",\n      \"2/21/2011\",\n      62.31\n  ],\n  [\n      \"United States\",\n      \"2/21/2011\",\n      12.96\n  ],\n  [\n      \"United States\",\n      \"2/21/2011\",\n      20.32\n  ],\n  [\n      \"United States\",\n      \"2/22/2011\",\n      8.85\n  ],\n  [\n      \"United States\",\n      \"2/23/2011\",\n      19.44\n  ],\n  [\n      \"United States\",\n      \"2/24/2011\",\n      6.936\n  ],\n  [\n      \"United States\",\n      \"12/29/2014\",\n      2.48\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      1207.84\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      300.98\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      302.376\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      209.7\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      101.12\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      68.46\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      258.75\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      393.568\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      34.58\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      19.6\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      6.03\n  ],\n  [\n      \"United States\",\n      \"12/30/2014\",\n      12.53\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      323.136\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      90.93\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      209.3\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      52.776\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      20.72\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      13.904\n  ],\n  [\n      \"United States\",\n      \"12/31/2014\",\n      3.024\n  ]\n]",
      "schema": "[\n  {\n    \"name\": \"Country\",\n    \"type\": \"string\"\n  },\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%-m/%-d/%Y\"\n  },\n  {\n    \"name\": \"Sales\",\n    \"type\": \"number\"\n  }\n]"
    },
    "3": {
      "type": "FusionTime",
      "title": "Column chart with time axis",
      "desc": "Time-series chart with series plotted as column.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "column-time-axis",
      "className": "ColumnTimeAxis",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%Y-%m-%d\"\n  },\n  {\n    \"name\": \"Daily Visitors\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-chart-with-time-axis-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/column-chart-with-time-axis-schema.json'\n).then(jsonify);\n\nclass ColumnChartTimeAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'Daily Visitors Count of a Website'\n          },\n          yAxis: [\n            {\n              plot: {\n                value: 'Daily Visitors',\n                type: 'column'\n              },\n              title: 'Daily Visitors (in thousand)'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default ColumnChartTimeAxis;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-chart-with-time-axis-data.json\n[\n  [\n    \"2016-01-01\",\n    5\n  ],\n  [\n    \"2016-01-02\",\n    90\n  ],\n  [\n    \"2016-01-03\",\n    19\n  ],\n  [\n    \"2016-01-04\",\n    74\n  ],\n  [\n    \"2016-01-05\",\n    81\n  ],\n  [\n    \"2016-01-06\",\n    48\n  ],\n  [\n    \"2016-01-07\",\n    60\n  ],\n  [\n    \"2016-01-08\",\n    18\n  ],\n  [\n    \"2016-01-09\",\n    36\n  ],\n  [\n    \"2016-01-10\",\n    53\n  ],\n  [\n    \"2016-01-11\",\n    15\n  ],\n  [\n    \"2016-01-12\",\n    34\n  ],\n  [\n    \"2016-01-13\",\n    71\n  ],\n  [\n    \"2016-01-14\",\n    47\n  ],\n  [\n    \"2016-01-15\",\n    35\n  ],\n  [\n    \"2016-01-16\",\n    99\n  ],\n  [\n    \"2016-01-17\",\n    79\n  ],\n  [\n    \"2016-01-18\",\n    25\n  ],\n  [\n    \"2016-01-19\",\n    14\n  ],\n  [\n    \"2016-01-20\",\n    16\n  ],\n  [\n    \"2016-01-21\",\n    79\n  ],\n  [\n    \"2016-01-22\",\n    15\n  ],\n  [\n    \"2016-01-23\",\n    94\n  ],\n  [\n    \"2016-01-24\",\n    77\n  ],\n  [\n    \"2016-01-25\",\n    38\n  ],\n  [\n    \"2016-01-26\",\n    17\n  ],\n  [\n    \"2016-01-27\",\n    24\n  ],\n  [\n    \"2016-01-28\",\n    53\n  ],\n  [\n    \"2016-01-29\",\n    52\n  ],\n  [\n    \"2016-01-30\",\n    76\n  ],\n  [\n    \"2016-01-31\",\n    86\n  ],\n  [\n    \"2016-02-01\",\n    71\n  ],\n  [\n    \"2016-02-02\",\n    84\n  ],\n  [\n    \"2016-02-03\",\n    3\n  ],\n  [\n    \"2016-02-04\",\n    86\n  ],\n  [\n    \"2016-02-05\",\n    86\n  ],\n  [\n    \"2016-02-06\",\n    93\n  ],\n  [\n    \"2016-02-07\",\n    66\n  ],\n  [\n    \"2016-02-08\",\n    18\n  ],\n  [\n    \"2016-02-09\",\n    95\n  ],\n  [\n    \"2016-02-10\",\n    21\n  ],\n  [\n    \"2016-02-11\",\n    19\n  ],\n  [\n    \"2016-02-12\",\n    28\n  ],\n  [\n    \"2016-02-13\",\n    36\n  ],\n  [\n    \"2016-02-14\",\n    95\n  ],\n  [\n    \"2016-02-15\",\n    83\n  ],\n  [\n    \"2016-02-16\",\n    43\n  ],\n  [\n    \"2016-02-17\",\n    19\n  ],\n  [\n    \"2016-02-18\",\n    46\n  ],\n  [\n    \"2016-02-19\",\n    75\n  ],\n  [\n    \"2016-02-20\",\n    61\n  ],\n  [\n    \"2016-02-21\",\n    54\n  ],\n  [\n    \"2016-02-22\",\n    96\n  ],\n  [\n    \"2016-02-23\",\n    56\n  ],\n  [\n    \"2016-02-24\",\n    78\n  ],\n  [\n    \"2016-02-25\",\n    32\n  ],\n  [\n    \"2016-02-26\",\n    39\n  ],\n  [\n    \"2016-02-27\",\n    7\n  ],\n  [\n    \"2016-02-28\",\n    92\n  ],\n  [\n    \"2016-02-29\",\n    18\n  ],\n  [\n    \"2016-03-01\",\n    33\n  ],\n  [\n    \"2016-03-02\",\n    32\n  ],\n  [\n    \"2016-03-03\",\n    49\n  ],\n  [\n    \"2016-03-04\",\n    59\n  ],\n  [\n    \"2016-03-05\",\n    42\n  ],\n  [\n    \"2016-03-06\",\n    94\n  ],\n  [\n    \"2016-03-07\",\n    15\n  ],\n  [\n    \"2016-03-08\",\n    31\n  ],\n  [\n    \"2016-03-09\",\n    32\n  ],\n  [\n    \"2016-03-10\",\n    93\n  ],\n  [\n    \"2016-03-11\",\n    53\n  ]\n]"
    },
    "4": {
      "type": "FusionTime",
      "title": "Area chart with time axis",
      "desc": "Time-series chart with series plotted as area.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "area-time-axis",
      "className": "AreaTimeAxis",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%Y-%m-%d\"\n  },\n  {\n    \"name\": \"Daily Visitors\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/area-chart-with-time-axis-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/area-chart-with-time-axis-schema.json'\n).then(jsonify);\n\nclass AreaTimeAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'Daily Visitors Count of a Website'\n          },\n          yAxis: [\n            {\n              plot: {\n                value: 'Daily Visitors',\n                type: 'area'\n              },\n              title: 'Daily Visitors (in thousand)'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default AreaTimeAxis;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/area-chart-with-time-axis-data.json\n[\n  [\n    \"2016-01-01\",\n    5\n  ],\n  [\n    \"2016-01-02\",\n    90\n  ],\n  [\n    \"2016-01-03\",\n    19\n  ],\n  [\n    \"2016-01-04\",\n    74\n  ],\n  [\n    \"2016-01-05\",\n    81\n  ],\n  [\n    \"2016-01-06\",\n    48\n  ],\n  [\n    \"2016-01-07\",\n    60\n  ],\n  [\n    \"2016-01-08\",\n    18\n  ],\n  [\n    \"2016-01-09\",\n    36\n  ],\n  [\n    \"2016-01-10\",\n    53\n  ],\n  [\n    \"2016-01-11\",\n    15\n  ],\n  [\n    \"2016-01-12\",\n    34\n  ],\n  [\n    \"2016-01-13\",\n    71\n  ],\n  [\n    \"2016-01-14\",\n    47\n  ],\n  [\n    \"2016-01-15\",\n    35\n  ],\n  [\n    \"2016-01-16\",\n    99\n  ],\n  [\n    \"2016-01-17\",\n    79\n  ],\n  [\n    \"2016-01-18\",\n    25\n  ],\n  [\n    \"2016-01-19\",\n    14\n  ],\n  [\n    \"2016-01-20\",\n    16\n  ],\n  [\n    \"2016-01-21\",\n    79\n  ],\n  [\n    \"2016-01-22\",\n    15\n  ],\n  [\n    \"2016-01-23\",\n    94\n  ],\n  [\n    \"2016-01-24\",\n    77\n  ],\n  [\n    \"2016-01-25\",\n    38\n  ],\n  [\n    \"2016-01-26\",\n    17\n  ],\n  [\n    \"2016-01-27\",\n    24\n  ],\n  [\n    \"2016-01-28\",\n    53\n  ],\n  [\n    \"2016-01-29\",\n    52\n  ],\n  [\n    \"2016-01-30\",\n    76\n  ],\n  [\n    \"2016-01-31\",\n    86\n  ],\n  [\n    \"2016-02-01\",\n    71\n  ],\n  [\n    \"2016-02-02\",\n    84\n  ],\n  [\n    \"2016-02-03\",\n    3\n  ],\n  [\n    \"2016-02-04\",\n    86\n  ],\n  [\n    \"2016-02-05\",\n    86\n  ],\n  [\n    \"2016-02-06\",\n    93\n  ],\n  [\n    \"2016-02-07\",\n    66\n  ],\n  [\n    \"2016-02-08\",\n    18\n  ],\n  [\n    \"2016-02-09\",\n    95\n  ],\n  [\n    \"2016-02-10\",\n    21\n  ],\n  [\n    \"2016-02-11\",\n    19\n  ],\n  [\n    \"2016-02-12\",\n    28\n  ],\n  [\n    \"2016-02-13\",\n    36\n  ],\n  [\n    \"2016-02-14\",\n    95\n  ],\n  [\n    \"2016-02-15\",\n    83\n  ],\n  [\n    \"2016-02-16\",\n    43\n  ],\n  [\n    \"2016-02-17\",\n    19\n  ],\n  [\n    \"2016-02-18\",\n    46\n  ],\n  [\n    \"2016-02-19\",\n    75\n  ],\n  [\n    \"2016-02-20\",\n    61\n  ],\n  [\n    \"2016-02-21\",\n    54\n  ],\n  [\n    \"2016-02-22\",\n    96\n  ],\n  [\n    \"2016-02-23\",\n    56\n  ],\n  [\n    \"2016-02-24\",\n    78\n  ],\n  [\n    \"2016-02-25\",\n    32\n  ],\n  [\n    \"2016-02-26\",\n    39\n  ],\n  [\n    \"2016-02-27\",\n    7\n  ],\n  [\n    \"2016-02-28\",\n    92\n  ],\n  [\n    \"2016-02-29\",\n    18\n  ],\n  [\n    \"2016-03-01\",\n    33\n  ],\n  [\n    \"2016-03-02\",\n    32\n  ],\n  [\n    \"2016-03-03\",\n    49\n  ],\n  [\n    \"2016-03-04\",\n    59\n  ],\n  [\n    \"2016-03-05\",\n    42\n  ],\n  [\n    \"2016-03-06\",\n    94\n  ],\n  [\n    \"2016-03-07\",\n    15\n  ],\n  [\n    \"2016-03-08\",\n    31\n  ],\n  [\n    \"2016-03-09\",\n    32\n  ],\n  [\n    \"2016-03-10\",\n    93\n  ],\n  [\n    \"2016-03-11\",\n    53\n  ],\n  [\n    \"2016-03-12\",\n    64\n  ],\n  [\n    \"2016-03-13\",\n    42\n  ],\n  [\n    \"2016-03-14\",\n    18\n  ],\n  [\n    \"2016-03-15\",\n    4\n  ],\n  [\n    \"2016-03-16\",\n    83\n  ],\n  [\n    \"2016-03-17\",\n    35\n  ],\n  [\n    \"2016-03-18\",\n    96\n  ],\n  [\n    \"2016-03-19\",\n    54\n  ],\n  [\n    \"2016-03-20\",\n    40\n  ],\n  [\n    \"2016-03-21\",\n    38\n  ],\n  [\n    \"2016-03-22\",\n    21\n  ],\n  [\n    \"2016-03-23\",\n    34\n  ],\n  [\n    \"2016-03-24\",\n    94\n  ],\n  [\n    \"2016-03-25\",\n    89\n  ],\n  [\n    \"2016-03-26\",\n    86\n  ]\n]"
    },
    "5": {
      "type": "FusionCharts",
      "title": "A 3D Pie Chart",
      "desc": "A 3D pie chart using the datasource attribute from component's scope",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/PMYojVGxqXJoKsEKbAu9/"
      },
      "directory": "3d-pie-chart",
      "className": "3dPieChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'Pie3D',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return <ReactFC {...chartConfigs} />;\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\r\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Recommended Portfolio Split\",\r\n        \"subCaption\" : \"For a net-worth of $1M\",\r\n        \"showValues\":\"1\",\r\n        \"showPercentInTooltip\" : \"0\",\r\n        \"numberPrefix\" : \"$\",\r\n        \"enableMultiSlicing\":\"1\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Equity\",\r\n            \"value\": \"300000\"\r\n        }, {\r\n            \"label\": \"Debt\",\r\n            \"value\": \"230000\"\r\n        }, {\r\n            \"label\": \"Bullion\",\r\n            \"value\": \"180000\"\r\n        }, {\r\n            \"label\": \"Real-estate\",\r\n            \"value\": \"270000\"\r\n        }, {\r\n            \"label\": \"Insurance\",\r\n            \"value\": \"20000\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "6": {
      "type": "FusionCharts",
      "title": "A simple gauge",
      "desc": "A simple gauge to show customer satisfaction score",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "simple-gauge",
      "className": "SimpleGauge",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Widgets from 'fusioncharts/fusioncharts.widgets';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Widgets, FusionTheme);\n\nconst chartConfigs = {\n  type: 'angulargauge',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return <ReactFC {...chartConfigs} />;\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Nordstorm's Customer Satisfaction Score for 2017\",\r\n        \"lowerLimit\": \"0\",\r\n        \"upperLimit\": \"100\",\r\n        \"showValue\": \"1\",\r\n        \"numberSuffix\": \"%\",\r\n        \"theme\": \"fusion\",\r\n        \"showToolTip\": \"0\"\r\n    },\r\n    \"colorRange\": {\r\n        \"color\": [\r\n            {\r\n                \"minValue\": \"0\",\r\n                \"maxValue\": \"50\",\r\n                \"code\": \"#F2726F\"\r\n            }, {\r\n                \"minValue\": \"50\",\r\n                \"maxValue\": \"75\",\r\n                \"code\": \"#FFC533\"\r\n            }, {\r\n                \"minValue\": \"75\",\r\n                \"maxValue\": \"100\",\r\n                \"code\": \"#62B58F\"\r\n            }\r\n        ]\r\n    },\r\n    \"dials\": {\r\n        \"dial\": [\r\n            {\r\n                \"value\": \"81\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
    },
    "7": {
      "type": "FusionCharts",
      "title": "A Column, Line and Area Combi Chart",
      "desc": "A combination chart of column, line and area",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/9YVJsfW5ujm8gVXfGY0B/"
      },
      "directory": "column-line-area-combi-chart",
      "className": "ColumnAreaLineCombiChart",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'mscombi2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\r\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Expense Analysis\",\r\n        \"subCaption\": \"ACME Inc.\",\r\n        \"xAxisname\": \"Region\",\r\n        \"yAxisName\": \"Amount (In USD)\",\r\n        \"numberPrefix\": \"$\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"categories\": [\r\n        {\r\n            \"category\": [\r\n                {\r\n                    \"label\": \"East\"\r\n                },\r\n                {\r\n                    \"label\": \"West\"\r\n                },\r\n                {\r\n                    \"label\": \"South\"\r\n                },\r\n                {\r\n                    \"label\": \"North\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"dataset\": [\r\n        {\r\n            \"seriesName\": \"Actual Expenses\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"1441290\"\r\n                },\r\n                {\r\n                    \"value\": \"855912\"\r\n                },\r\n                {\r\n                    \"value\": \"911404\"\r\n                },\r\n                {\r\n                    \"value\": \"648136\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"seriesName\": \"Budgeted Expenses\",\r\n            \"renderAs\": \"line\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"1297430\"\r\n                },\r\n                {\r\n                    \"value\": \"776485\"\r\n                },\r\n                {\r\n                    \"value\": \"685352\"\r\n                },\r\n                {\r\n                    \"value\": \"726791\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"seriesName\": \"Unknown liabilities\",\r\n            \"renderAs\": \"area\",\r\n            \"showAnchors\" : \"0\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"143860\"\r\n                },\r\n                {\r\n                    \"value\": \"79427\"\r\n                },\r\n                {\r\n                    \"value\": \"226052\"\r\n                },\r\n                {\r\n                    \"value\": \"78655\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
    },
    "8": {
      "type": "FusionTime",
      "title": "Column and line combination on time axis",
      "desc": "Two series of data plotted as a combination of column & line on the same y-axis.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/9YVJsfW5ujm8gVXfGY0B/"
      },
      "directory": "column-chart-time-axis",
      "className": "ColumnChartTimeAxis",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-line-combination-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%Y-%m-%d\"\n  },\n  {\n    \"name\": \"Daily Visitors\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-chart-with-time-axis-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/column-chart-with-time-axis-schema.json'\n).then(jsonify);\n\nclass ColumnChartTimeAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          chart: {\n            showLegend: 0\n          },\n          caption: {\n            text: 'Daily Visitors Count of a Website'\n          },\n          yAxis: [\n            {\n              plot: {\n                value: 'Daily Visitors',\n                type: 'column'\n              },\n              title: 'Daily Visitors (in thousand)'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default ColumnChartTimeAxis;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/column-chart-with-time-axis-data.json\n[\n  [\n    \"2016-01-01\",\n    5\n  ],\n  [\n    \"2016-01-02\",\n    90\n  ],\n  [\n    \"2016-01-03\",\n    19\n  ],\n  [\n    \"2016-01-04\",\n    74\n  ],\n  [\n    \"2016-01-05\",\n    81\n  ],\n  [\n    \"2016-01-06\",\n    48\n  ],\n  [\n    \"2016-01-07\",\n    60\n  ],\n  [\n    \"2016-01-08\",\n    18\n  ],\n  [\n    \"2016-01-09\",\n    36\n  ],\n  [\n    \"2016-01-10\",\n    53\n  ],\n  [\n    \"2016-01-11\",\n    15\n  ],\n  [\n    \"2016-01-12\",\n    34\n  ],\n  [\n    \"2016-01-13\",\n    71\n  ],\n  [\n    \"2016-01-14\",\n    47\n  ],\n  [\n    \"2016-01-15\",\n    35\n  ],\n  [\n    \"2016-01-16\",\n    99\n  ],\n  [\n    \"2016-01-17\",\n    79\n  ],\n  [\n    \"2016-01-18\",\n    25\n  ],\n  [\n    \"2016-01-19\",\n    14\n  ],\n  [\n    \"2016-01-20\",\n    16\n  ],\n  [\n    \"2016-01-21\",\n    79\n  ],\n  [\n    \"2016-01-22\",\n    15\n  ],\n  [\n    \"2016-01-23\",\n    94\n  ],\n  [\n    \"2016-01-24\",\n    77\n  ],\n  [\n    \"2016-01-25\",\n    38\n  ],\n  [\n    \"2016-01-26\",\n    17\n  ],\n  [\n    \"2016-01-27\",\n    24\n  ],\n  [\n    \"2016-01-28\",\n    53\n  ],\n  [\n    \"2016-01-29\",\n    52\n  ],\n  [\n    \"2016-01-30\",\n    76\n  ],\n  [\n    \"2016-01-31\",\n    86\n  ],\n  [\n    \"2016-02-01\",\n    71\n  ],\n  [\n    \"2016-02-02\",\n    84\n  ],\n  [\n    \"2016-02-03\",\n    3\n  ],\n  [\n    \"2016-02-04\",\n    86\n  ],\n  [\n    \"2016-02-05\",\n    86\n  ],\n  [\n    \"2016-02-06\",\n    93\n  ],\n  [\n    \"2018-09-19\",\n    31\n  ],\n  [\n    \"2018-09-20\",\n    28\n  ],\n  [\n    \"2018-09-21\",\n    11\n  ],\n  [\n    \"2018-09-22\",\n    7\n  ],\n  [\n    \"2018-09-23\",\n    7\n  ],\n  [\n    \"2018-09-24\",\n    18\n  ],\n  [\n    \"2018-09-25\",\n    35\n  ],\n  [\n    \"2018-09-26\",\n    31\n  ],\n  [\n    \"2018-09-27\",\n    26\n  ],\n  [\n    \"2018-09-28\",\n    13\n  ],\n  [\n    \"2018-09-29\",\n    8\n  ],\n  [\n    \"2018-09-30\",\n    13\n  ],\n  [\n    \"2018-10-01\",\n    36\n  ],\n  [\n    \"2018-10-02\",\n    52\n  ],\n  [\n    \"2018-10-03\",\n    33\n  ],\n  [\n    \"2018-10-04\",\n    26\n  ],\n  [\n    \"2018-10-05\",\n    18\n  ],\n  [\n    \"2018-10-06\",\n    4\n  ],\n  [\n    \"2018-10-07\",\n    11\n  ],\n  [\n    \"2018-10-08\",\n    23\n  ],\n  [\n    \"2018-10-09\",\n    58\n  ],\n  [\n    \"2018-10-10\",\n    47\n  ],\n  [\n    \"2018-10-11\",\n    38\n  ],\n  [\n    \"2018-10-12\",\n    21\n  ],\n  [\n    \"2018-10-13\",\n    10\n  ],\n  [\n    \"2018-10-14\",\n    13\n  ],\n  [\n    \"2018-10-15\",\n    40\n  ],\n  [\n    \"2018-10-16\",\n    27\n  ],\n  [\n    \"2018-10-17\",\n    35\n  ],\n  [\n    \"2018-10-18\",\n    15\n  ],\n  [\n    \"2018-10-19\",\n    23\n  ],\n  [\n    \"2018-10-20\",\n    8\n  ],\n  [\n    \"2018-10-21\",\n    6\n  ],\n  [\n    \"2018-10-22\",\n    30\n  ],\n  [\n    \"2018-10-23\",\n    47\n  ],\n  [\n    \"2018-10-24\",\n    32\n  ],\n  [\n    \"2018-10-25\",\n    44\n  ],\n  [\n    \"2018-10-26\",\n    46\n  ],\n  [\n    \"2018-10-27\",\n    13\n  ],\n  [\n    \"2018-10-28\",\n    25\n  ],\n  [\n    \"2018-10-29\",\n    84\n  ],\n  [\n    \"2018-10-30\",\n    35\n  ],\n  [\n    \"2018-10-31\",\n    33\n  ],\n  [\n    \"2018-11-01\",\n    23\n  ],\n  [\n    \"2018-11-02\",\n    22\n  ],\n  [\n    \"2018-11-03\",\n    1\n  ],\n  [\n    \"2018-11-04\",\n    14\n  ],\n  [\n    \"2018-11-05\",\n    18\n  ],\n  [\n    \"2018-11-06\",\n    29\n  ],\n  [\n    \"2018-11-07\",\n    52\n  ],\n  [\n    \"2018-11-08\",\n    99\n  ],\n  [\n    \"2018-11-09\",\n    208\n  ],\n  [\n    \"2018-11-10\",\n    30\n  ],\n  [\n    \"2018-11-11\",\n    35\n  ],\n  [\n    \"2018-11-12\",\n    30\n  ]\n]"
    },
    "9": {
      "type": "FusionTime",
      "title": "Plotting multiple series on time axis",
      "desc": "A multi-series chart with 2 variables plotted as line on the same y-axis.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "multi-series-time-axis",
      "className": "MultiSeriesTimeAxis",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%d-%b-%y\"\n  },\n  {\n    \"name\": \"Type\",\n    \"type\": \"string\"\n  },\n  {\n    \"name\": \"Sales Value\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/plotting-multiple-series-on-time-axis-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/plotting-multiple-series-on-time-axis-schema.json'\n).then(jsonify);\n\nclass MultiSeriesTimeAxis extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          caption: {\n            text: 'Sales Analysis'\n          },\n          subcaption: {\n            text: 'Grocery & Footwear'\n          },\n          series: 'Type',\n          yAxis: [\n            {\n              plot: 'Sales Value',\n              title: 'Sale Value',\n              format: {\n                prefix: '$'\n              }\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default MultiSeriesTimeAxis;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/plotting-multiple-series-on-time-axis-data.json\n[\n  [\n    \"01-Feb-11\",\n    \"Grocery\",\n    8866\n  ],\n  [\n    \"01-Feb-11\",\n    \"Footwear\",\n    984\n  ],\n  [\n    \"02-Feb-11\",\n    \"Grocery\",\n    2174\n  ],\n  [\n    \"02-Feb-11\",\n    \"Footwear\",\n    1109\n  ],\n  [\n    \"03-Feb-11\",\n    \"Grocery\",\n    2084\n  ],\n  [\n    \"03-Feb-11\",\n    \"Footwear\",\n    6526\n  ],\n  [\n    \"04-Feb-11\",\n    \"Grocery\",\n    1503\n  ],\n  [\n    \"04-Feb-11\",\n    \"Footwear\",\n    1007\n  ],\n  [\n    \"05-Feb-11\",\n    \"Grocery\",\n    4928\n  ],\n  [\n    \"05-Feb-11\",\n    \"Footwear\",\n    4112\n  ],\n  [\n    \"06-Feb-11\",\n    \"Grocery\",\n    4667\n  ],\n  [\n    \"06-Feb-11\",\n    \"Footwear\",\n    7206\n  ],\n  [\n    \"07-Feb-11\",\n    \"Grocery\",\n    1064\n  ],\n  [\n    \"07-Feb-11\",\n    \"Footwear\",\n    7890\n  ],\n  [\n    \"08-Feb-11\",\n    \"Grocery\",\n    851\n  ],\n  [\n    \"08-Feb-11\",\n    \"Footwear\",\n    6002\n  ],\n  [\n    \"09-Feb-11\",\n    \"Grocery\",\n    7326\n  ],\n  [\n    \"09-Feb-11\",\n    \"Footwear\",\n    5168\n  ],\n  [\n    \"10-Feb-11\",\n    \"Grocery\",\n    8399\n  ],\n  [\n    \"10-Feb-11\",\n    \"Footwear\",\n    7992\n  ],\n  [\n    \"11-Feb-11\",\n    \"Grocery\",\n    4084\n  ],\n  [\n    \"11-Feb-11\",\n    \"Footwear\",\n    3001\n  ],\n  [\n    \"12-Feb-11\",\n    \"Grocery\",\n    4012\n  ],\n  [\n    \"12-Feb-11\",\n    \"Footwear\",\n    7891\n  ],\n  [\n    \"13-Feb-11\",\n    \"Grocery\",\n    1673\n  ],\n  [\n    \"13-Feb-11\",\n    \"Footwear\",\n    511\n  ],\n  [\n    \"14-Feb-11\",\n    \"Grocery\",\n    6018\n  ],\n  [\n    \"14-Feb-11\",\n    \"Footwear\",\n    1861\n  ],\n  [\n    \"15-Feb-11\",\n    \"Grocery\",\n    9011\n  ],\n  [\n    \"15-Feb-11\",\n    \"Footwear\",\n    1424\n  ],\n  [\n    \"16-Feb-11\",\n    \"Grocery\",\n    5817\n  ],\n  [\n    \"16-Feb-11\",\n    \"Footwear\",\n    6807\n  ],\n  [\n    \"17-Feb-11\",\n    \"Grocery\",\n    5813\n  ],\n  [\n    \"17-Feb-11\",\n    \"Footwear\",\n    4126\n  ],\n  [\n    \"18-Feb-11\",\n    \"Grocery\",\n    566\n  ],\n  [\n    \"18-Feb-11\",\n    \"Footwear\",\n    3482\n  ],\n  [\n    \"19-Feb-11\",\n    \"Grocery\",\n    9065\n  ],\n  [\n    \"19-Feb-11\",\n    \"Footwear\",\n    5649\n  ],\n  [\n    \"20-Feb-11\",\n    \"Grocery\",\n    6734\n  ],\n  [\n    \"20-Feb-11\",\n    \"Footwear\",\n    309\n  ],\n  [\n    \"21-Feb-11\",\n    \"Grocery\",\n    6937\n  ],\n  [\n    \"21-Feb-11\",\n    \"Footwear\",\n    6568\n  ],\n  [\n    \"22-Feb-11\",\n    \"Grocery\",\n    3038\n  ],\n  [\n    \"22-Feb-11\",\n    \"Footwear\",\n    2458\n  ],\n  [\n    \"23-Feb-11\",\n    \"Grocery\",\n    4445\n  ],\n  [\n    \"23-Feb-11\",\n    \"Footwear\",\n    356\n  ],\n  [\n    \"24-Feb-11\",\n    \"Grocery\",\n    8782\n  ],\n  [\n    \"24-Feb-11\",\n    \"Footwear\",\n    5883\n  ],\n  [\n    \"25-Feb-11\",\n    \"Grocery\",\n    9489\n  ],\n  [\n    \"25-Feb-11\",\n    \"Footwear\",\n    6556\n  ],\n  [\n    \"26-Feb-11\",\n    \"Grocery\",\n    9624\n  ],\n  [\n    \"26-Feb-11\",\n    \"Footwear\",\n    1601\n  ],\n  [\n    \"27-Feb-11\",\n    \"Grocery\",\n    9033\n  ],\n  [\n    \"27-Feb-11\",\n    \"Footwear\",\n    1359\n  ],\n  [\n    \"28-Feb-11\",\n    \"Grocery\",\n    6932\n  ],\n  [\n    \"28-Feb-11\",\n    \"Footwear\",\n    4361\n  ],\n  [\n    \"01-Mar-11\",\n    \"Grocery\",\n    625\n  ],\n  [\n    \"01-Mar-11\",\n    \"Footwear\",\n    3807\n  ],\n  [\n    \"02-Mar-11\",\n    \"Grocery\",\n    904\n  ],\n  [\n    \"02-Mar-11\",\n    \"Footwear\",\n    2279\n  ],\n  [\n    \"03-Mar-11\",\n    \"Grocery\",\n    7572\n  ],\n  [\n    \"03-Mar-11\",\n    \"Footwear\",\n    7226\n  ],\n  [\n    \"04-Mar-11\",\n    \"Grocery\",\n    2124\n  ],\n  [\n    \"04-Mar-11\",\n    \"Footwear\",\n    6155\n  ],\n  [\n    \"05-Mar-11\",\n    \"Grocery\",\n    8157\n  ],\n  [\n    \"05-Mar-11\",\n    \"Footwear\",\n    1908\n  ],\n  [\n    \"06-Mar-11\",\n    \"Grocery\",\n    8666\n  ]\n]"
    },
    "10": {
      "type": "FusionTime",
      "title": "Plotting two variables (measures)",
      "desc": "Plotting 2 different variables in 2 different vertically stacked canvases.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/PMYojVGxqXJoKsEKbAu9/"
      },
      "directory": "multivariate-timeseries",
      "className": "MultivariateTimeSeries",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/plotting-two-variable-measures-data.json",
      "schema": "[\n  {\n    \"name\": \"Date\",\n    \"type\": \"date\",\n    \"format\": \"%-m/%d/%Y\"\n  },\n  {\n    \"name\": \"O2 concentration\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Surface Temperature\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/plotting-two-variable-measures-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/plotting-two-variable-measures-schema.json'\n).then(jsonify);\n\nclass MultivariateTimeSeries extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: {\n            text: 'Cariaco Basin Sampling'\n          },\n          subcaption: {\n            text: 'Analysis of O₂ Concentration and Surface Temperature'\n          },\n          yAxis: [\n            {\n              plot: 'O2 concentration',\n              min: '3',\n              max: '6',\n              title: 'O₂ Concentration (mg/L)'\n            },\n            {\n              plot: 'Surface Temperature',\n              min: '18',\n              max: '30',\n              title: 'Surface Temperature (°C)'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default MultivariateTimeSeries;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/plotting-two-variable-measures-data.json\n[\n  [\n    \"11/08/1995\",\n    4.85,\n    27.49\n  ],\n  [\n    \"12/13/1995\",\n    4.07,\n    25.39\n  ],\n  [\n    \"1/12/1996\",\n    4.66,\n    24.48\n  ],\n  [\n    \"2/13/1996\",\n    4.77,\n    24.05\n  ],\n  [\n    \"3/13/1996\",\n    5.6,\n    22.869\n  ],\n  [\n    \"4/16/1996\",\n    5.47,\n    22.999\n  ],\n  [\n    \"5/09/1996\",\n    4.97,\n    23.189\n  ],\n  [\n    \"6/12/1996\",\n    4.83,\n    25.43\n  ],\n  [\n    \"7/10/1996\",\n    4.53,\n    27.67\n  ],\n  [\n    \"8/06/1996\",\n    4.29,\n    26.25\n  ],\n  [\n    \"9/10/1996\",\n    4.25,\n    29.102\n  ],\n  [\n    \"10/09/1996\",\n    4.45,\n    27.536\n  ],\n  [\n    \"11/10/1996\",\n    4.51,\n    26.316\n  ],\n  [\n    \"12/11/1996\",\n    4.5,\n    26.501\n  ],\n  [\n    \"1/07/1997\",\n    4.98,\n    24.19\n  ],\n  [\n    \"2/13/1997\",\n    4.84,\n    23.92\n  ],\n  [\n    \"3/13/1997\",\n    5.46,\n    22.465\n  ],\n  [\n    \"4/15/1997\",\n    4.94,\n    23.227\n  ],\n  [\n    \"5/10/1997\",\n    5,\n    24.328\n  ],\n  [\n    \"6/17/1997\",\n    4.66,\n    25.225\n  ],\n  [\n    \"7/08/1997\",\n    4.94,\n    24.966\n  ],\n  [\n    \"8/17/1997\",\n    5.03,\n    24.599\n  ],\n  [\n    \"9/17/1997\",\n    5.55,\n    28.71\n  ],\n  [\n    \"6/09/2011\",\n    4.5,\n    29.085\n  ],\n  [\n    \"7/07/2011\",\n    4.43,\n    27.243\n  ],\n  [\n    \"8/09/2011\",\n    4.47,\n    28.175\n  ],\n  [\n    \"9/06/2011\",\n    4.45,\n    29.541\n  ],\n  [\n    \"10/04/2011\",\n    4.43,\n    27.971\n  ],\n  [\n    \"11/18/2011\",\n    4.64,\n    28.594\n  ],\n  [\n    \"1/10/2012\",\n    4.62,\n    25.213\n  ],\n  [\n    \"2/07/2012\",\n    4.89,\n    23.021\n  ],\n  [\n    \"3/16/2012\",\n    5.7,\n    22.581\n  ],\n  [\n    \"4/10/2012\",\n    4.82,\n    24.799\n  ],\n  [\n    \"5/15/2012\",\n    4.61,\n    27.182\n  ],\n  [\n    \"7/26/2012\",\n    4.67,\n    26.847\n  ],\n  [\n    \"8/14/2012\",\n    4.53,\n    28.239\n  ],\n  [\n    \"9/10/2012\",\n    4.47,\n    27.837\n  ],\n  [\n    \"10/10/2012\",\n    4.49,\n    28.538\n  ],\n  [\n    \"11/08/2012\",\n    4.4,\n    28.759\n  ],\n  [\n    \"12/04/2012\",\n    4.4,\n    26.816\n  ],\n  [\n    \"3/05/2013\",\n    4.69,\n    24.698\n  ],\n  [\n    \"4/09/2013\",\n    4.55,\n    24.767\n  ],\n  [\n    \"5/09/2013\",\n    4.28,\n    25.422\n  ],\n  [\n    \"6/11/2013\",\n    4.54,\n    26.647\n  ],\n  [\n    \"7/11/2013\",\n    4.28,\n    27.881\n  ],\n  [\n    \"8/13/2013\",\n    4.39,\n    \"\"\n  ],\n  [\n    \"9/11/2013\",\n    4.48,\n    29.359\n  ],\n  [\n    \"10/08/2013\",\n    4.42,\n    29.103\n  ],\n  [\n    \"11/13/2013\",\n    4.44,\n    27.268\n  ],\n  [\n    \"12/04/2013\",\n    4.53,\n    26.727\n  ],\n  [\n    \"1/14/2014\",\n    4.83,\n    23.104\n  ],\n  [\n    \"2/04/2014\",\n    4.95,\n    22.282\n  ],\n  [\n    \"4/01/2014\",\n    5.49,\n    23.25\n  ],\n  [\n    \"5/06/2014\",\n    5.33,\n    23.566\n  ],\n  [\n    \"6/13/2014\",\n    4.7,\n    25.103\n  ],\n  [\n    \"9/03/2014\",\n    4.52,\n    28.015\n  ],\n  [\n    \"10/07/2014\",\n    4.45,\n    27.054\n  ],\n  [\n    \"11/12/2014\",\n    4.5,\n    27.328\n  ],\n  [\n    \"12/04/2014\",\n    4.65,\n    26.277\n  ],\n  [\n    \"2/15/2015\",\n    4.65,\n    25.931\n  ],\n  [\n    \"3/10/2015\",\n    4.62,\n    23.631\n  ],\n  [\n    \"4/24/2015\",\n    4.86,\n    23.4\n  ],\n  [\n    \"7/29/2015\",\n    4.7,\n    25.298\n  ],\n  [\n    \"8/18/2015\",\n    4.34,\n    25.363\n  ],\n  [\n    \"9/10/2015\",\n    4.44,\n    26.631\n  ],\n  [\n    \"11/16/2015\",\n    4.47,\n    25.904\n  ],\n  [\n    \"12/09/2015\",\n    \"\",\n    25.668\n  ],\n  [\n    \"1/12/2016\",\n    4.84,\n    24.311\n  ],\n  [\n    \"2/04/2016\",\n    4.85,\n    24.475\n  ],\n  [\n    \"5/11/2016\",\n    4.48,\n    26.409\n  ],\n  [\n    \"6/07/2016\",\n    4.52,\n    \"\"\n  ],\n  [\n    \"9/20/2016\",\n    4.59,\n    28.673\n  ],\n  [\n    \"12/21/2016\",\n    4.55,\n    26.626\n  ]\n]"
    },
    "11": {
      "type": "FusionCharts",
      "title": "Fetch data from JSON URL",
      "desc": "Fetch data remotely from a JSON file or URL",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "fetch-data-from-json-url",
      "className": "FetchDataFromJsonUrl",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'jsonurl',\n  dataSource: 'data.json',\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "12": {
      "type": "FusionCharts",
      "title": "Fetch data from XML URL",
      "desc": "Fetch data remotely from an XML file or URL",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/SC12epi1Fc3SrJq4GQde/"
      },
      "directory": "fetch-data-from-xml-url",
      "className": "FetchDataFromXmlUrl",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'xmlurl',\n  dataSource: 'data.xml',\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "<chart caption=\"Countries With Most Oil Reserves [2017-18]\" subcaption=\"In MMbbl = One Million barrels\" xaxisname=\"Country\" yaxisname=\"Reserves (MMbbl)\" numbersuffix=\"K\" theme=\"fusion\">\r\n    <set label=\"Venezuela\" value=\"290\" />\r\n    <set label=\"Saudi\" value=\"260\" />\r\n    <set label=\"Canada\" value=\"180\" />\r\n    <set label=\"Iran\" value=\"140\" />\r\n    <set label=\"Russia\" value=\"115\" />\r\n    <set label=\"UAE\" value=\"100\" />\r\n    <set label=\"US\" value=\"30\" />\r\n    <set label=\"China\" value=\"30\" />\r\n</chart>\r\n"
    },
    "13": {
      "type": "FusionCharts",
      "title": "Update chart data",
      "desc": "Change the data dynamically and watch the chart update automatically",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/MGVka8FdLIr4Kl3rZIL5/"
      },
      "directory": "update-chart-data",
      "className": "UpdateChartData",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = chartConfigs;\n\n    this.updateData = this.updateData.bind(this);\n  }\n\n  // This function generates random number.\n  getRandomNumber() {\n    var max = 290, min = 30;\n    return Math.round(((max - min) * Math.random()) + min);\n  }\n\n  // Handler for update button.\n  // Randomly updates the values of the chart.\n  updateData() {\n    var prevDs = Object.assign({}, this.state.dataSource);\n    prevDs.data[2].value = this.getRandomNumber();\n    prevDs.data[3].value = this.getRandomNumber();\n    this.setState({\n      dataSource: prevDs,\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...this.state} />\n         <center>\n           <button\n             className='btn btn-outline-secondary btn-sm'\n             onClick={this.updateData}\n           >\n             Change Chart Data\n           </button>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\",\r\n        \"updateAnimDuration\":\"0.4\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "14": {
      "type": "FusionCharts",
      "title": "Update chart attribute",
      "desc": "Update the chart with new attributes",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/fY9uLtqAjTiMz17EGIe0/"
      },
      "directory": "update-chart-attributes",
      "className": "UpdateChartAttributes",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: {}\n    }\n\n    this.renderComplete = this.renderComplete.bind(this);\n    this.changeBackgroundColor = this.changeBackgroundColor.bind(this);\n    this.changeCaptionTextAlignment = this.changeCaptionTextAlignment.bind(this);\n    this.resetChart = this.resetChart.bind(this);\n  }\n\n  // Called by FC-React component to return the rendered chart\n  renderComplete(chart) {\n    this.setState({ chart });\n  }\n\n  // Handler for 'Change Background' button.\n  // Changes the chart background color.\n  changeBackgroundColor() {\n    this.state.chart.setChartAttribute('bgColor', '#efefef');\n  }\n\n  // Handler for 'Change CaptionAlignment' button.\n  // Changes the caption alignment to left.\n  changeCaptionTextAlignment() {\n    this.state.chart.setChartAttribute('captionAlignment', 'left');\n  }\n\n  // Handler for 'Reset' button.\n  // Resets the chart to the original version.\n  resetChart() {\n    this.state.chart.setChartAttribute('bgColor', null);\n    this.state.chart.setChartAttribute('captionAlignment', null);\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} onRender={this.renderComplete} />\n        <center>\n          <button\n            className='btn btn-outline-secondary btn-sm'\n            onClick={this.changeBackgroundColor}\n          >\n            Change Background\n          </button>\n          <button\n            className='btn btn-outline-secondary btn-sm'\n            onClick={this.changeCaptionTextAlignment}\n          >\n            Change Caption Alignment\n          </button>\n          <button\n            className='btn btn-outline-secondary btn-sm'\n            onClick={this.resetChart}\n          >\n            Reset\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n      \"subCaption\": \"In MMbbl = One Million barrels\",\r\n      \"xAxisName\": \"Country\",\r\n      \"yAxisName\": \"Reserves (MMbbl)\",\r\n      \"numberSuffix\": \"K\",\r\n      \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "15": {
      "type": "FusionCharts",
      "title": "Listen to events from chart",
      "desc": "Bind event listener to the chart and get the related event data",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/Amq8ly5uIW9KQ5XepNzU/"
      },
      "directory": "trigger-events-from-chart",
      "className": "TriggerEventsFromChart",
      "code": "import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FusionCharts from \"fusioncharts\";\nimport Charts from \"fusioncharts/fusioncharts.charts\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: \"column2d\",\n  width: 600,\n  height: 400,\n  dataFormat: \"json\",\n  dataSource: {\n    /* see data tab */\n  }\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      actualValue: \"Hover on the plot to see the value along with the label\",\n      message: \"Hover on the plot to see the value along with the label\"\n    };\n\n    this.dataplotrollover = this.dataplotrollover.bind(this);\n    this.dataplotrollout = this.dataplotrollout.bind(this);\n  }\n\n  // Event callback handler for 'dataplotRollOver'.\n  // Shows the value of the hovered plot on the page.\n  dataplotrollover(eventObj, dataObj) {\n    this.setState({\n      message: [\n        \"You are currently hovering over \",\n        <strong>{dataObj.categoryLabel}</strong>,\n        \" whose value is \",\n        <strong>{dataObj.displayValue}</strong>\n      ]\n    });\n  }\n\n  // Event callback handler for 'dataplotRollOut'.\n  // Resets to the original message.\n  dataplotrollout(eventObj, dataObj) {\n    this.setState({\n      message: this.state.actualValue\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC\n          {...chartConfigs}\n          fcEvent-dataplotRollOver={this.dataplotrollover}\n          fcEvent-dataplotRollOut={this.dataplotrollout}\n        />\n        <p style={{ padding: \"10px\", background: \"#f5f2f0\" }}>\n          {this.state.message}\n        </p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Chart />, document.getElementById(\"root\"));\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "16": {
      "type": "FusionCharts",
      "title": "Percentage Calculation",
      "desc": "Hover on a plot to see the percentage value with respect to total",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/Amq8ly5uIW9KQ5XepNzU/"
      },
      "directory": "percentage-calculation",
      "className": "PercentageCalculation",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      actualValue: 'Hover on the plot to see the percentage along with the label',\n      message: 'Hover on the plot to see the value along with the label'\n    };\n\n    this.dataplotrollover = this.dataplotrollover.bind(this);\n    this.dataplotrollout = this.dataplotrollout.bind(this);\n    this.renderComplete = this.renderComplete.bind(this);\n  }\n\n  // Event callback handler for 'dataplotRollOver'.\n  // Shows the percentage of the hovered plot on the page.\n  dataplotrollover(eventObj, dataObj) {\n    const value = ((dataObj.value / this.state.total) * 100).toFixed(2);\n    this.setState({\n      message: [\n        <strong>{dataObj.categoryLabel}</strong>,\n        \" is \",\n        <strong>{value}</strong>,\n        \"% of top 8 oil reserve countries\"\n      ]\n    });\n  }\n\n  // Event callback handler for 'dataplotRollOut'.\n  // Resets to the default message.\n  dataplotrollout(eventObj, dataObj) {\n    this.setState({\n      message: this.state.actualValue\n    });\n  }\n\n  // Trigerred when chart is rendered.\n  // Calculates and stores the total value of the chart's data.\n  renderComplete(chart) {\n    const chartData = chart.getJSONData();\n    this.setState({\n      total: chartData.data.reduce((p, c) => p + Number(c.value), 0),\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC\n          {...chartConfigs}\n          onRender={this.renderComplete}\n          fcEvent-dataplotRollOver={this.dataplotrollover}\n          fcEvent-dataplotRollOut={this.dataplotrollout}\n        />\n        <p style={{ padding: '10px', background: '#f5f2f0' }}>\n          {this.state.message}\n        </p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n  \"chart\": {\r\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n      \"subCaption\": \"In MMbbl = One Million barrels\",\r\n      \"xAxisName\": \"Country\",\r\n      \"yAxisName\": \"Reserves (MMbbl)\",\r\n      \"numberSuffix\": \"K\",\r\n      \"theme\": \"fusion\"\r\n  },\r\n  \"data\": [\r\n      {\r\n          \"label\": \"Venezuela\",\r\n          \"value\": \"290\"\r\n      },\r\n      {\r\n          \"label\": \"Saudi\",\r\n          \"value\": \"260\"\r\n      },\r\n      {\r\n          \"label\": \"Canada\",\r\n          \"value\": \"180\"\r\n      },\r\n      {\r\n          \"label\": \"Iran\",\r\n          \"value\": \"140\"\r\n      },\r\n      {\r\n          \"label\": \"Russia\",\r\n          \"value\": \"115\"\r\n      },\r\n      {\r\n          \"label\": \"UAE\",\r\n          \"value\": \"100\"\r\n      },\r\n      {\r\n          \"label\": \"US\",\r\n          \"value\": \"30\"\r\n      },\r\n      {\r\n          \"label\": \"China\",\r\n          \"value\": \"30\"\r\n      }\r\n  ]\r\n}\r\n"
    },
    "17": {
      "type": "FusionCharts",
      "title": "Add drill-down to chart",
      "desc": "Use LinkedCharts to quickly add drill-down to charts",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "drill-down",
      "className": "DrillDown",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\n// Trigerred when chart is rendered.\n// Configures the linked charts.\nconst alterChart = (chart) => {\n  chart.configureLink(\n    {\n      type: 'pie2d',\n      width: '500',\n      overlayButton: {\n        message: 'Back',\n        fontColor: '880000',\n        bgColor: 'FFEEEE',\n        borderColor: '660000',\n      },\n    },\n    0\n  );\n};\n\nclass Chart extends Component {\n  render () {\n    return (\n      <ReactFC {...chartConfigs} onRender={alterChart} />\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Sales of top 3 juice flavors last year\",\r\n        \"subcaption\": \"Click on a column to see details\",\r\n        \"xaxisname\": \"Flavor\",\r\n        \"yaxisname\": \"Amount (In USD)\",\r\n        \"numberprefix\": \"$\",\r\n        \"theme\": \"fusion\",\r\n        \"rotateValues\": \"0\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Apple\",\r\n            \"value\": \"810000\",\r\n            \"link\": \"newchart-xml-apple\"\r\n        },\r\n        {\r\n            \"label\": \"Cranberry\",\r\n            \"value\": \"620000\",\r\n            \"link\": \"newchart-xml-cranberry\"\r\n        },\r\n        {\r\n            \"label\": \"Grape\",\r\n            \"value\": \"350000\",\r\n            \"link\": \"newchart-xml-grape\"\r\n        }\r\n    ],\r\n    \"linkeddata\": [\r\n        {\r\n            \"id\": \"apple\",\r\n            \"linkedchart\": {\r\n                \"chart\": {\r\n                    \"caption\": \"Apple Juice - Quarterly Sales\",\r\n                    \"subcaption\": \"Last year\",\r\n                    \"numberprefix\": \"$\",\r\n                    \"theme\": \"fusion\",\r\n                    \"rotateValues\": \"0\",\r\n                    \"plottooltext\": \"$label, $dataValue,  $percentValue\"\r\n                },\r\n                \"data\": [{\r\n                    \"label\": \"Q1\",\r\n                    \"value\": \"157000\",\r\n                    \"displayValue\": \"Q1, $157K\"\r\n                }, {\r\n                    \"label\": \"Q2\",\r\n                    \"value\": \"172000\",\r\n                    \"displayValue\": \"Q2, $172K\"\r\n                }, {\r\n                    \"label\": \"Q3\",\r\n                    \"value\": \"206000\",\r\n                    \"displayValue\": \"Q3, $206K\"\r\n                }, {\r\n                    \"label\": \"Q4\",\r\n                    \"value\": \"275000\",\r\n                    \"displayValue\": \"Q4, $275K\"\r\n                }]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"cranberry\",\r\n            \"linkedchart\": {\r\n                \"chart\": {\r\n                    \"caption\": \"Cranberry Juice - Quarterly Sales\",\r\n                    \"subcaption\": \"Last year\",\r\n                    \"numberprefix\": \"$\",\r\n                    \"theme\": \"fusion\",\r\n                    \"plottooltext\": \"$label, $dataValue,  $percentValue\"\r\n                },\r\n                \"data\": [\r\n                    {\r\n                        \"label\": \"Q1\",\r\n                        \"value\": \"102000\",\r\n                        \"displayValue\": \"Q1, $102K\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Q2\",\r\n                        \"value\": \"142000\",\r\n                        \"displayValue\": \"Q2, $142K\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Q3\",\r\n                        \"value\": \"187000\",\r\n                        \"displayValue\": \"Q3, $187K\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Q4\",\r\n                        \"value\": \"189000\",\r\n                        \"displayValue\": \"Q4, $189K\"\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n        {\r\n            \"id\": \"grape\",\r\n            \"linkedchart\": {\r\n                \"chart\": {\r\n                    \"caption\": \"Grape Juice - Quarterly Sales\",\r\n                    \"subcaption\": \"Last year\",\r\n                    \"numberprefix\": \"$\",\r\n                    \"theme\": \"fusion\",\r\n                    \"rotateValues\": \"0\",\r\n                    \"plottooltext\": \"$label, $dataValue,  $percentValue\"\r\n                },\r\n                \"data\": [{\r\n                    \"label\": \"Q1\",\r\n                    \"value\": \"45000\",\r\n                    \"displayValue\": \"Q1, $45K\"\r\n                }, {\r\n                    \"label\": \"Q2\",\r\n                    \"value\": \"72000\",\r\n                    \"displayValue\": \"Q2, $72K\"\r\n                }, {\r\n                    \"label\": \"Q3\",\r\n                    \"value\": \"95000\",\r\n                    \"displayValue\": \"Q3, $95K\"\r\n                }, {\r\n                    \"label\": \"Q4\",\r\n                    \"value\": \"108000\",\r\n                    \"displayValue\": \"Q4, $108K\"\r\n                }]\r\n            }\r\n        }\r\n    ]\r\n}\r\n"
    },
    "18": {
      "type": "FusionTime",
      "title": "Adding a reference line",
      "desc": "Adding a static reference line (by value) to indicate targets or threshold.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "adding-reference-line",
      "className": "AddingReferenceLine",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%-m/%-d/%Y %H:%M:%S\"\n  },\n  {\n    \"name\": \"Carbon mono-oxide (mg/m^3)\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Non methane hydrocarbons (microg/m^3)\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Benzene\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Nitrogen dioxide\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Temperature\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/adding-a-reference-line-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/adding-a-reference-line-schema.json'\n).then(jsonify);\n\nclass AddingReferenceLine extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          caption: {\n            text: 'Temperature readings in Italy'\n          },\n          yAxis: [\n            {\n              plot: 'Temperature',\n              title: 'Temperature',\n              format: {\n                suffix: '°C'\n              },\n              style: {\n                title: {\n                  'font-size': '14px'\n                }\n              },\n              referenceLine: [\n                {\n                  label: 'Controlled Temperature',\n                  value: '10'\n                }\n              ]\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default AddingReferenceLine;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/adding-a-reference-line-data.json\n[\n  [\n    \"3/10/2004 18:00:00\",\n    2.6,\n    150,\n    11.9,\n    113,\n    13.6\n  ],\n  [\n    \"3/10/2004 19:00:00\",\n    2,\n    112,\n    9.4,\n    92,\n    13.3\n  ],\n  [\n    \"3/10/2004 20:00:00\",\n    2.2,\n    88,\n    9,\n    114,\n    11.9\n  ],\n  [\n    \"3/10/2004 21:00:00\",\n    2.2,\n    80,\n    9.2,\n    122,\n    11\n  ],\n  [\n    \"3/10/2004 22:00:00\",\n    1.6,\n    51,\n    6.5,\n    116,\n    11.2\n  ],\n  [\n    \"3/10/2004 23:00:00\",\n    1.2,\n    38,\n    4.7,\n    96,\n    11.2\n  ],\n  [\n    \"3/11/2004 0:00:00\",\n    1.2,\n    31,\n    3.6,\n    77,\n    11.3\n  ],\n  [\n    \"3/11/2004 1:00:00\",\n    1,\n    31,\n    3.3,\n    76,\n    10.7\n  ],\n  [\n    \"3/11/2004 2:00:00\",\n    0.9,\n    24,\n    2.3,\n    60,\n    10.7\n  ],\n  [\n    \"3/11/2004 3:00:00\",\n    0.6,\n    19,\n    1.7,\n    45,\n    10.3\n  ],\n  [\n    \"3/11/2004 4:00:00\",\n    2,\n    14,\n    1.3,\n    34,\n    10.1\n  ],\n  [\n    \"3/11/2004 5:00:00\",\n    0.7,\n    8,\n    1.1,\n    28,\n    11\n  ],\n  [\n    \"3/11/2004 6:00:00\",\n    0.7,\n    16,\n    1.6,\n    48,\n    10.5\n  ],\n  [\n    \"3/11/2004 7:00:00\",\n    1.1,\n    29,\n    3.2,\n    82,\n    10.2\n  ],\n  [\n    \"3/11/2004 8:00:00\",\n    2,\n    64,\n    8,\n    112,\n    10.8\n  ],\n  [\n    \"3/11/2004 9:00:00\",\n    2.2,\n    87,\n    9.5,\n    101,\n    10.5\n  ],\n  [\n    \"3/11/2004 10:00:00\",\n    1.7,\n    77,\n    6.3,\n    98,\n    10.8\n  ],\n  [\n    \"3/11/2004 11:00:00\",\n    1.5,\n    43,\n    5,\n    92,\n    10.5\n  ],\n  [\n    \"3/11/2004 12:00:00\",\n    1.6,\n    61,\n    5.2,\n    95,\n    9.5\n  ],\n  [\n    \"3/11/2004 13:00:00\",\n    1.9,\n    63,\n    7.3,\n    112,\n    8.3\n  ],\n  [\n    \"3/11/2004 14:00:00\",\n    2.9,\n    164,\n    11.5,\n    128,\n    8\n  ],\n  [\n    \"3/11/2004 15:00:00\",\n    2.2,\n    79,\n    8.8,\n    126,\n    8.3\n  ],\n  [\n    \"3/11/2004 16:00:00\",\n    2.2,\n    95,\n    8.3,\n    131,\n    9.7\n  ],\n  [\n    \"3/11/2004 17:00:00\",\n    2.9,\n    150,\n    11.2,\n    135,\n    9.8\n  ],\n  [\n    \"3/11/2004 18:00:00\",\n    4.8,\n    307,\n    20.8,\n    151,\n    10.3\n  ],\n  [\n    \"3/11/2004 19:00:00\",\n    6.9,\n    461,\n    27.4,\n    172,\n    9.7\n  ],\n  [\n    \"3/11/2004 20:00:00\",\n    6.1,\n    401,\n    24,\n    165,\n    9.6\n  ],\n  [\n    \"3/11/2004 21:00:00\",\n    3.9,\n    197,\n    12.8,\n    136,\n    9.1\n  ],\n  [\n    \"3/11/2004 22:00:00\",\n    1.5,\n    61,\n    4.7,\n    85,\n    8.2\n  ],\n  [\n    \"3/11/2004 23:00:00\",\n    1,\n    26,\n    2.6,\n    53,\n    8.2\n  ],\n  [\n    \"3/12/2004 0:00:00\",\n    1.7,\n    55,\n    5.9,\n    97,\n    8.3\n  ],\n  [\n    \"3/12/2004 1:00:00\",\n    1.9,\n    53,\n    6.4,\n    110,\n    7.7\n  ],\n  [\n    \"3/12/2004 2:00:00\",\n    1.4,\n    40,\n    4.1,\n    91,\n    7.1\n  ],\n  [\n    \"3/12/2004 3:00:00\",\n    0.8,\n    21,\n    1.9,\n    70,\n    7\n  ],\n  [\n    \"3/12/2004 4:00:00\",\n    5,\n    10,\n    1.1,\n    32,\n    6.1\n  ],\n  [\n    \"3/12/2004 5:00:00\",\n    0.6,\n    7,\n    1,\n    44,\n    6.3\n  ],\n  [\n    \"3/12/2004 6:00:00\",\n    0.8,\n    17,\n    1.8,\n    71,\n    6.8\n  ],\n  [\n    \"3/12/2004 7:00:00\",\n    1.4,\n    33,\n    4.4,\n    104,\n    6.4\n  ],\n  [\n    \"3/14/2004 1:00:00\",\n    2.8,\n    131,\n    11.9,\n    119,\n    14.6\n  ],\n  [\n    \"3/14/2004 2:00:00\",\n    2.5,\n    92,\n    8.6,\n    104,\n    12.5\n  ],\n  [\n    \"3/14/2004 3:00:00\",\n    2.4,\n    132,\n    9.7,\n    97,\n    11.6\n  ],\n  [\n    \"3/14/2004 4:00:00\",\n    3,\n    56,\n    5.2,\n    82,\n    12.1\n  ],\n  [\n    \"3/14/2004 5:00:00\",\n    1.2,\n    32,\n    3.7,\n    70,\n    11.5\n  ],\n  [\n    \"3/14/2004 6:00:00\",\n    1,\n    29,\n    2.5,\n    63,\n    11.6\n  ],\n  [\n    \"3/14/2004 7:00:00\",\n    0.9,\n    27,\n    2.4,\n    67,\n    10.4\n  ],\n  [\n    \"3/14/2004 8:00:00\",\n    1.4,\n    36,\n    4.2,\n    84,\n    11.6\n  ],\n  [\n    \"3/14/2004 9:00:00\",\n    1.6,\n    57,\n    6.4,\n    83,\n    12.4\n  ],\n  [\n    \"3/14/2004 10:00:00\",\n    2.2,\n    129,\n    8.6,\n    98,\n    14.5\n  ],\n  [\n    \"3/14/2004 11:00:00\",\n    2.8,\n    148,\n    10.9,\n    114,\n    16.9\n  ],\n  [\n    \"3/14/2004 12:00:00\",\n    2.8,\n    145,\n    10.7,\n    119,\n    19.3\n  ],\n  [\n    \"3/14/2004 13:00:00\",\n    2,\n    93,\n    7.5,\n    104,\n    21.2\n  ],\n  [\n    \"3/14/2004 14:00:00\",\n    1.8,\n    84,\n    7.5,\n    102,\n    21.4\n  ],\n  [\n    \"3/14/2004 15:00:00\",\n    1.9,\n    99,\n    8.2,\n    107,\n    21.9\n  ],\n  [\n    \"3/14/2004 16:00:00\",\n    3,\n    150,\n    11.9,\n    129,\n    22.2\n  ],\n  [\n    \"3/14/2004 17:00:00\",\n    2.9,\n    156,\n    12,\n    128,\n    21.3\n  ],\n  [\n    \"3/14/2004 18:00:00\",\n    2.5,\n    122,\n    12.2,\n    121,\n    19.7\n  ],\n  [\n    \"3/14/2004 19:00:00\",\n    4.6,\n    262,\n    20.6,\n    157,\n    18.4\n  ],\n  [\n    \"3/14/2004 20:00:00\",\n    5.9,\n    341,\n    23.1,\n    173,\n    17.6\n  ],\n  [\n    \"3/14/2004 21:00:00\",\n    3.4,\n    214,\n    14.7,\n    146,\n    16.7\n  ],\n  [\n    \"3/14/2004 22:00:00\",\n    2.1,\n    100,\n    9,\n    121,\n    16.3\n  ],\n  [\n    \"3/14/2004 23:00:00\",\n    2.2,\n    79,\n    8.8,\n    119,\n    14.7\n  ],\n  [\n    \"3/15/2004 0:00:00\",\n    1.8,\n    66,\n    7.4,\n    99,\n    14.8\n  ],\n  [\n    \"3/15/2004 1:00:00\",\n    1.8,\n    73,\n    6.9,\n    93,\n    14\n  ],\n  [\n    \"3/15/2004 2:00:00\",\n    1.8,\n    66,\n    7,\n    88,\n    13.4\n  ],\n  [\n    \"3/15/2004 3:00:00\",\n    1.1,\n    44,\n    4.4,\n    80,\n    12.6\n  ],\n  [\n    \"3/15/2004 4:00:00\",\n    9,\n    44,\n    4,\n    71,\n    12.3\n  ],\n  [\n    \"3/15/2004 5:00:00\",\n    1,\n    39,\n    3.9,\n    74,\n    11.9\n  ],\n  [\n    \"3/15/2004 6:00:00\",\n    1.4,\n    51,\n    6.4,\n    80,\n    11.4\n  ],\n  [\n    \"3/15/2004 7:00:00\",\n    2.2,\n    107,\n    9.7,\n    89,\n    11.3\n  ],\n  [\n    \"3/15/2004 8:00:00\",\n    5.5,\n    336,\n    25.9,\n    114,\n    12.4\n  ],\n  [\n    \"3/15/2004 9:00:00\",\n    8.1,\n    618,\n    36.7,\n    149,\n    14.8\n  ],\n  [\n    \"3/15/2004 10:00:00\",\n    5.8,\n    438,\n    26.6,\n    157,\n    17.4\n  ],\n  [\n    \"3/15/2004 11:00:00\",\n    4.2,\n    334,\n    20.1,\n    155,\n    19.8\n  ],\n  [\n    \"3/15/2004 12:00:00\",\n    3.1,\n    221,\n    14.1,\n    134,\n    22\n  ],\n  [\n    \"3/15/2004 13:00:00\",\n    2.9,\n    207,\n    14.9,\n    119,\n    23.3\n  ],\n  [\n    \"3/15/2004 14:00:00\",\n    2.9,\n    191,\n    15.4,\n    111,\n    23.9\n  ],\n  [\n    \"3/15/2004 15:00:00\",\n    2.5,\n    185,\n    12.1,\n    104,\n    24.4\n  ],\n  [\n    \"3/15/2004 16:00:00\",\n    2.3,\n    141,\n    11.5,\n    99,\n    24.4\n  ],\n  [\n    \"3/15/2004 17:00:00\",\n    2.8,\n    214,\n    14.8,\n    110,\n    23.8\n  ],\n  [\n    \"3/15/2004 18:00:00\",\n    6.1,\n    471,\n    32.1,\n    162,\n    22.5\n  ],\n  [\n    \"3/15/2004 19:00:00\",\n    8,\n    685,\n    39.2,\n    187,\n    20.4\n  ],\n  [\n    \"3/15/2004 20:00:00\",\n    6.5,\n    538,\n    31,\n    165,\n    18.3\n  ],\n  [\n    \"3/15/2004 21:00:00\",\n    4.2,\n    319,\n    19.9,\n    145,\n    16.7\n  ],\n  [\n    \"3/15/2004 22:00:00\",\n    3.2,\n    224,\n    15.3,\n    125,\n    15.7\n  ],\n  [\n    \"3/15/2004 23:00:00\",\n    1.4,\n    67,\n    6.9,\n    101,\n    15.3\n  ],\n  [\n    \"3/16/2004 0:00:00\",\n    2.1,\n    155,\n    11.1,\n    103,\n    14.1\n  ],\n  [\n    \"3/16/2004 1:00:00\",\n    1.2,\n    49,\n    5.4,\n    88,\n    14.8\n  ],\n  [\n    \"3/16/2004 2:00:00\",\n    0.8,\n    29,\n    2.8,\n    61,\n    14.8\n  ],\n  [\n    \"3/16/2004 3:00:00\",\n    0.7,\n    25,\n    2.3,\n    60,\n    13.6\n  ],\n  [\n    \"3/16/2004 4:00:00\",\n    10,\n    25,\n    2.6,\n    59,\n    12.3\n  ],\n  [\n    \"3/16/2004 5:00:00\",\n    0.6,\n    17,\n    2,\n    52,\n    12.8\n  ],\n  [\n    \"3/16/2004 6:00:00\",\n    0.9,\n    27,\n    3.5,\n    64,\n    11.2\n  ],\n  [\n    \"3/16/2004 7:00:00\",\n    1.3,\n    50,\n    5.1,\n    70,\n    11\n  ],\n  [\n    \"3/16/2004 8:00:00\",\n    3.4,\n    218,\n    16.2,\n    97,\n    11.7\n  ],\n  [\n    \"3/16/2004 9:00:00\",\n    3.7,\n    285,\n    19.7,\n    95,\n    13.6\n  ],\n  [\n    \"3/16/2004 10:00:00\",\n    5.3,\n    437,\n    25.1,\n    150,\n    17.8\n  ],\n  [\n    \"3/16/2004 11:00:00\",\n    4.1,\n    327,\n    20,\n    162,\n    21.4\n  ],\n  [\n    \"3/16/2004 12:00:00\",\n    3.3,\n    283,\n    18.3,\n    154,\n    24.4\n  ]\n]"
    },
    "19": {
      "type": "FusionTime",
      "title": "Annotating single data point",
      "desc": "Annotating specific data point using data markers on line series",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "annotating-data",
      "className": "AnnotatingData",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/annotating-single-data-point-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%b-%Y\"\n  },\n  {\n    \"name\": \"Interest Rate\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/annotating-single-data-point-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/annotating-single-data-point-schema.json'\n).then(jsonify);\n\nclass AnnotatingData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: {\n            text: 'Interest Rate Analysis'\n          },\n          subCaption: {\n            text: 'Federal Reserve (USA)'\n          },\n          yAxis: [\n            {\n              plot: 'Interest Rate',\n              format: {\n                suffix: '%'\n              },\n              title: 'Interest Rate'\n            }\n          ],\n          dataMarker: [\n            {\n              seriesName: 'Interest Rate',\n              time: 'Mar-1980',\n              identifier: 'H',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'As a part of credit control program, under the leadership of Paul Volcker, the Fed tightened the money supply, allowing the federal fund rates to approach 20 percent.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'Aug-1982',\n              identifier: 'L',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'The FED eases off the monetary brakes, allowing interest rates to fall and the economy to begin a strong recovery.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'Oct-1987',\n              identifier: 'L',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'The FED is forced to ease rate after the stock market crash.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'May-1989',\n              identifier: 'H',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'Liquidity problem forced the Fed to increase rate to nearly 10%.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'Sept-1992',\n              identifier: 'L',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'To fight the jobless economy growth the Fed had to reduce the interest rate to 3%.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'Jun-2003',\n              identifier: 'L',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'Struggling to revive the economy, the FED cuts it’s benchmark rate to 1%.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'Sep-2007',\n              identifier: 'L',\n              timeFormat: '%b-%Y',\n              tooltext: 'Fed started reducing the Federal Fund Rate.'\n            },\n            {\n              seriesName: 'Interest Rate',\n              time: 'Dec-2008',\n              identifier: 'L',\n              timeFormat: '%b-%Y',\n              tooltext:\n                'Fed reduced the interest rates to sub 0.25% to manage the menace of longest economic downturn since World War 2'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default AnnotatingData;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/annotating-single-data-point-data.json\n[\n  [\n    \"Jan-1980\",\n    14\n  ],\n  [\n    \"Feb-1980\",\n    20\n  ],\n  [\n    \"Mar-1980\",\n    20\n  ],\n  [\n    \"Apr-1980\",\n    11.5\n  ],\n  [\n    \"May-1980\",\n    11.5\n  ],\n  [\n    \"Jun-1980\",\n    9.75\n  ],\n  [\n    \"Jul-1980\",\n    9.5\n  ],\n  [\n    \"Aug-1980\",\n    10\n  ],\n  [\n    \"Sep-1980\",\n    12\n  ],\n  [\n    \"Oct-1980\",\n    13.75\n  ],\n  [\n    \"Nov-1980\",\n    18\n  ],\n  [\n    \"Dec-1980\",\n    18\n  ],\n  [\n    \"Jan-1981\",\n    16\n  ],\n  [\n    \"Feb-1981\",\n    16\n  ],\n  [\n    \"Mar-1981\",\n    16\n  ],\n  [\n    \"Apr-1981\",\n    16\n  ],\n  [\n    \"May-1981\",\n    20\n  ],\n  [\n    \"Jun-1981\",\n    20\n  ],\n  [\n    \"Jul-1981\",\n    20\n  ],\n  [\n    \"Aug-1981\",\n    20\n  ],\n  [\n    \"Sep-1981\",\n    20\n  ],\n  [\n    \"Oct-1981\",\n    20\n  ],\n  [\n    \"Nov-1981\",\n    13\n  ],\n  [\n    \"Dec-1981\",\n    12\n  ],\n  [\n    \"Jan-1982\",\n    15\n  ],\n  [\n    \"Feb-1982\",\n    15\n  ],\n  [\n    \"Mar-1982\",\n    15\n  ],\n  [\n    \"Apr-1982\",\n    13\n  ],\n  [\n    \"May-1982\",\n    13\n  ],\n  [\n    \"Jun-1982\",\n    13\n  ],\n  [\n    \"Jul-1982\",\n    12\n  ],\n  [\n    \"Aug-1982\",\n    9.5\n  ],\n  [\n    \"Sep-1982\",\n    10\n  ],\n  [\n    \"Oct-1982\",\n    9.5\n  ],\n  [\n    \"Nov-1982\",\n    9\n  ],\n  [\n    \"Dec-1982\",\n    8.5\n  ],\n  [\n    \"Jan-1983\",\n    8.5\n  ],\n  [\n    \"Feb-1983\",\n    8.5\n  ],\n  [\n    \"Mar-1983\",\n    8.5\n  ],\n  [\n    \"Apr-1983\",\n    8.5\n  ],\n  [\n    \"May-1983\",\n    9.63\n  ],\n  [\n    \"Jun-1983\",\n    9.63\n  ],\n  [\n    \"Jul-1983\",\n    9.63\n  ],\n  [\n    \"Aug-1983\",\n    9.5\n  ],\n  [\n    \"Sep-1983\",\n    9.5\n  ],\n  [\n    \"Oct-1983\",\n    9.5\n  ],\n  [\n    \"Nov-1983\",\n    9.5\n  ],\n  [\n    \"Dec-1983\",\n    9.5\n  ],\n  [\n    \"Jan-1984\",\n    9.5\n  ],\n  [\n    \"Feb-1984\",\n    9.5\n  ],\n  [\n    \"Mar-1984\",\n    10.5\n  ],\n  [\n    \"Apr-1984\",\n    10.5\n  ],\n  [\n    \"May-1984\",\n    10.5\n  ],\n  [\n    \"Jun-1984\",\n    11\n  ],\n  [\n    \"Jul-1984\",\n    11.75\n  ],\n  [\n    \"Aug-1984\",\n    11.75\n  ],\n  [\n    \"Sep-1984\",\n    10\n  ],\n  [\n    \"Oct-1984\",\n    10\n  ],\n  [\n    \"Nov-1984\",\n    9\n  ],\n  [\n    \"Dec-1984\",\n    8.25\n  ],\n  [\n    \"Jan-1985\",\n    8.25\n  ],\n  [\n    \"Feb-1985\",\n    9\n  ],\n  [\n    \"Mar-1985\",\n    8.5\n  ],\n  [\n    \"Apr-1985\",\n    8.25\n  ],\n  [\n    \"May-1985\",\n    7.75\n  ],\n  [\n    \"Jun-1985\",\n    7.75\n  ],\n  [\n    \"Jul-1985\",\n    8\n  ],\n  [\n    \"Aug-1985\",\n    8\n  ],\n  [\n    \"May-2001\",\n    4\n  ],\n  [\n    \"Jun-2001\",\n    3.75\n  ],\n  [\n    \"Jul-2001\",\n    3.75\n  ],\n  [\n    \"Aug-2001\",\n    3.5\n  ],\n  [\n    \"Sep-2001\",\n    3\n  ],\n  [\n    \"Oct-2001\",\n    2.5\n  ],\n  [\n    \"Nov-2001\",\n    2\n  ],\n  [\n    \"Dec-2001\",\n    1.75\n  ],\n  [\n    \"Jan-2002\",\n    1.75\n  ],\n  [\n    \"Feb-2002\",\n    1.75\n  ],\n  [\n    \"Mar-2002\",\n    1.75\n  ],\n  [\n    \"Apr-2002\",\n    1.75\n  ],\n  [\n    \"May-2002\",\n    1.75\n  ],\n  [\n    \"Jun-2002\",\n    1.75\n  ],\n  [\n    \"Jul-2002\",\n    1.75\n  ],\n  [\n    \"Aug-2002\",\n    1.75\n  ],\n  [\n    \"Sep-2002\",\n    1.75\n  ],\n  [\n    \"Oct-2002\",\n    1.75\n  ],\n  [\n    \"Nov-2002\",\n    1.25\n  ],\n  [\n    \"Dec-2002\",\n    1.25\n  ],\n  [\n    \"Jan-2003\",\n    1.25\n  ],\n  [\n    \"Feb-2003\",\n    1.25\n  ],\n  [\n    \"Mar-2003\",\n    1.25\n  ],\n  [\n    \"Apr-2003\",\n    1.25\n  ],\n  [\n    \"May-2003\",\n    1.25\n  ],\n  [\n    \"Jun-2003\",\n    1\n  ],\n  [\n    \"Jul-2003\",\n    1\n  ],\n  [\n    \"Aug-2003\",\n    1\n  ],\n  [\n    \"Sep-2003\",\n    1\n  ],\n  [\n    \"Oct-2003\",\n    1\n  ],\n  [\n    \"Nov-2003\",\n    1\n  ],\n  [\n    \"Dec-2003\",\n    1\n  ],\n  [\n    \"Jan-2004\",\n    1\n  ],\n  [\n    \"Feb-2004\",\n    1\n  ],\n  [\n    \"Mar-2004\",\n    1\n  ],\n  [\n    \"Apr-2004\",\n    1\n  ],\n  [\n    \"May-2004\",\n    1\n  ],\n  [\n    \"Jun-2004\",\n    1.25\n  ],\n  [\n    \"Jul-2004\",\n    1.25\n  ],\n  [\n    \"Aug-2004\",\n    1.5\n  ],\n  [\n    \"Sep-2004\",\n    1.75\n  ],\n  [\n    \"Oct-2004\",\n    1.75\n  ],\n  [\n    \"Nov-2004\",\n    2\n  ],\n  [\n    \"Dec-2004\",\n    2.25\n  ],\n  [\n    \"Jan-2005\",\n    2.25\n  ],\n  [\n    \"Feb-2005\",\n    2.5\n  ],\n  [\n    \"Mar-2005\",\n    2.75\n  ],\n  [\n    \"Apr-2005\",\n    2.75\n  ],\n  [\n    \"May-2005\",\n    3\n  ],\n  [\n    \"Jun-2005\",\n    3.25\n  ],\n  [\n    \"Jul-2005\",\n    3.25\n  ],\n  [\n    \"Aug-2005\",\n    3.5\n  ],\n  [\n    \"Sep-2005\",\n    3.75\n  ],\n  [\n    \"Oct-2005\",\n    3.75\n  ],\n  [\n    \"Nov-2005\",\n    4\n  ],\n  [\n    \"Dec-2005\",\n    4.25\n  ],\n  [\n    \"Jan-2006\",\n    4.5\n  ],\n  [\n    \"Feb-2006\",\n    4.5\n  ],\n  [\n    \"Mar-2006\",\n    4.75\n  ],\n  [\n    \"Apr-2006\",\n    4.75\n  ],\n  [\n    \"May-2006\",\n    5\n  ],\n  [\n    \"Jun-2006\",\n    5.25\n  ],\n  [\n    \"Jul-2006\",\n    5.25\n  ],\n  [\n    \"Aug-2006\",\n    5.25\n  ],\n  [\n    \"Sep-2006\",\n    5.25\n  ],\n  [\n    \"Oct-2006\",\n    5.25\n  ],\n  [\n    \"Nov-2006\",\n    5.25\n  ],\n  [\n    \"Dec-2006\",\n    5.25\n  ],\n  [\n    \"Jan-2007\",\n    5.25\n  ],\n  [\n    \"Feb-2007\",\n    5.25\n  ],\n  [\n    \"Mar-2007\",\n    5.25\n  ],\n  [\n    \"Apr-2007\",\n    5.25\n  ],\n  [\n    \"May-2007\",\n    5.25\n  ],\n  [\n    \"Jun-2007\",\n    5.25\n  ],\n  [\n    \"Jul-2007\",\n    5.25\n  ],\n  [\n    \"Aug-2007\",\n    5.25\n  ],\n  [\n    \"Sep-2007\",\n    4.75\n  ],\n  [\n    \"Oct-2007\",\n    4.5\n  ],\n  [\n    \"Nov-2007\",\n    4.5\n  ],\n  [\n    \"Dec-2007\",\n    4.25\n  ],\n  [\n    \"Jan-2008\",\n    3\n  ],\n  [\n    \"Feb-2008\",\n    3\n  ],\n  [\n    \"Mar-2008\",\n    2.25\n  ],\n  [\n    \"Apr-2008\",\n    2\n  ],\n  [\n    \"May-2008\",\n    2\n  ],\n  [\n    \"Jun-2008\",\n    2\n  ],\n  [\n    \"Jul-2008\",\n    2\n  ],\n  [\n    \"Aug-2008\",\n    2\n  ],\n  [\n    \"Sep-2008\",\n    2\n  ],\n  [\n    \"Oct-2008\",\n    1\n  ],\n  [\n    \"Nov-2008\",\n    1\n  ],\n  [\n    \"Dec-2008\",\n    0.125\n  ],\n  [\n    \"Jan-2009\",\n    0.125\n  ],\n  [\n    \"Feb-2009\",\n    0.125\n  ],\n  [\n    \"Mar-2009\",\n    0.125\n  ],\n  [\n    \"Apr-2009\",\n    0.125\n  ],\n  [\n    \"May-2009\",\n    0.125\n  ],\n  [\n    \"Jun-2009\",\n    0.125\n  ],\n  [\n    \"Jul-2009\",\n    0.125\n  ],\n  [\n    \"Aug-2009\",\n    0.125\n  ],\n  [\n    \"Sep-2009\",\n    0.125\n  ],\n  [\n    \"Oct-2009\",\n    0.125\n  ],\n  [\n    \"Nov-2009\",\n    0.125\n  ],\n  [\n    \"Dec-2009\",\n    0.125\n  ],\n  [\n    \"Jan-2010\",\n    0.125\n  ],\n  [\n    \"Feb-2010\",\n    0.125\n  ],\n  [\n    \"Mar-2010\",\n    0.125\n  ],\n  [\n    \"Apr-2010\",\n    0.125\n  ],\n  [\n    \"May-2010\",\n    0.125\n  ],\n  [\n    \"Jun-2010\",\n    0.125\n  ],\n  [\n    \"Jul-2010\",\n    0.125\n  ],\n  [\n    \"Aug-2010\",\n    0.125\n  ],\n  [\n    \"Sep-2010\",\n    0.125\n  ],\n  [\n    \"Oct-2010\",\n    0.125\n  ],\n  [\n    \"Nov-2010\",\n    0.125\n  ],\n  [\n    \"Dec-2010\",\n    0.125\n  ],\n  [\n    \"Jan-2011\",\n    0.125\n  ],\n  [\n    \"Feb-2011\",\n    0.125\n  ],\n  [\n    \"Mar-2011\",\n    0.125\n  ],\n  [\n    \"Apr-2011\",\n    0.125\n  ],\n  [\n    \"May-2011\",\n    0.125\n  ],\n  [\n    \"Jun-2011\",\n    0.125\n  ],\n  [\n    \"Jul-2011\",\n    0.125\n  ],\n  [\n    \"Aug-2011\",\n    0.125\n  ],\n  [\n    \"Sep-2011\",\n    0.125\n  ],\n  [\n    \"Oct-2011\",\n    0.125\n  ]\n]"
    },
    "20": {
      "type": "FusionTime",
      "title": "Single event overlay",
      "desc": "Plotting an event marker to indicate an event for a specific date.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "single-event-overlay",
      "className": "SingleEventOverlay",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%b-%Y\"\n  },\n  {\n    \"name\": \"Interest Rate\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/single-event-overlay-schema.json'\n).then(jsonify);\n\nclass SingleEventOverlay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: {\n            text: 'Interest Rate Analysis'\n          },\n          subCaption: {\n            text: 'Federal Reserve (USA)'\n          },\n          yAxis: [\n            {\n              plot: 'Interest Rate',\n              format: {\n                suffix: '%'\n              },\n              title: 'Interest Rate'\n            }\n          ],\n          xAxis: {\n            plot: 'Time',\n            timemarker: [\n              {\n                start: 'Mar-1980',\n                label: 'US inflation peaked at 14.8%.',\n                timeFormat: '%b-%Y',\n                style: {\n                  marker: {\n                    fill: '#D0D6F4'\n                  }\n                }\n              },\n              {\n                start: 'May-1981',\n                label:\n                  'To control inflation, the Fed started {br} raising interest rates to over {br} 20%.',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Jun-1983',\n                label:\n                  'By proactive actions of Mr.Volcker, {br} the inflation falls to 2.4% {br} from the peak of over 14% {br} just three years ago.',\n                timeFormat: '%b-%Y',\n                style: {\n                  marker: {\n                    fill: '#D0D6F4'\n                  }\n                }\n              },\n              {\n                start: 'Oct-1987',\n                label:\n                  'The Dow Jones Industrial Average lost {br} about 30% of it’s value.',\n                timeFormat: '%b-%Y',\n                style: {\n                  marker: {\n                    fill: '#FBEFCC'\n                  }\n                }\n              },\n              {\n                start: 'Jan-1989',\n                label:\n                  'George H.W. Bush becomes {br} the 41st president of US!',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Aug-1990',\n                label:\n                  'The oil prices spiked to $35 {br} per barrel from $15 per barrel {br} because of the Gulf War.',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Dec-1996',\n                label:\n                  'Alan Greenspan warns of the dangers {br} of \"irrational exuberance\" in financial markets, {br} an admonition that goes unheeded',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Sep-2008',\n                label: 'Lehman Brothers collapsed!',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Mar-2009',\n                label:\n                  'The net worth of US households {br} stood at a trough of $55 trillion.',\n                timeFormat: '%b-%Y',\n                style: {\n                  marker: {\n                    fill: '#FBEFCC'\n                  }\n                }\n              },\n              {\n                start: 'Oct-2009',\n                label: 'Unemployment rate peaked {br} in given times to 10%.',\n                timeFormat: '%b-%Y'\n              }\n            ]\n          },\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default SingleEventOverlay;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json\n[\n  [\n    \"Jan-1980\",\n    14\n  ],\n  [\n    \"Feb-1980\",\n    20\n  ],\n  [\n    \"Mar-1980\",\n    20\n  ],\n  [\n    \"Apr-1980\",\n    11.5\n  ],\n  [\n    \"May-1980\",\n    11.5\n  ],\n  [\n    \"Jun-1980\",\n    9.75\n  ],\n  [\n    \"Jul-1980\",\n    9.5\n  ],\n  [\n    \"Aug-1980\",\n    10\n  ],\n  [\n    \"Sep-1980\",\n    12\n  ],\n  [\n    \"Oct-1980\",\n    13.75\n  ],\n  [\n    \"Nov-1980\",\n    18\n  ],\n  [\n    \"Dec-1980\",\n    18\n  ],\n  [\n    \"Jan-1981\",\n    16\n  ],\n  [\n    \"Feb-1981\",\n    16\n  ],\n  [\n    \"Mar-1981\",\n    16\n  ],\n  [\n    \"Apr-1981\",\n    16\n  ],\n  [\n    \"May-1981\",\n    20\n  ],\n  [\n    \"Jun-1981\",\n    20\n  ],\n  [\n    \"Jul-1981\",\n    20\n  ],\n  [\n    \"Aug-1981\",\n    20\n  ],\n  [\n    \"Sep-1981\",\n    20\n  ],\n  [\n    \"Oct-1981\",\n    20\n  ],\n  [\n    \"Nov-1981\",\n    13\n  ],\n  [\n    \"Dec-1981\",\n    12\n  ],\n  [\n    \"Jan-1982\",\n    15\n  ],\n  [\n    \"Feb-1982\",\n    15\n  ],\n  [\n    \"Mar-1982\",\n    15\n  ],\n  [\n    \"Apr-1982\",\n    13\n  ],\n  [\n    \"May-1982\",\n    13\n  ],\n  [\n    \"Jun-1982\",\n    13\n  ],\n  [\n    \"Jul-1982\",\n    12\n  ],\n  [\n    \"Aug-1982\",\n    9.5\n  ],\n  [\n    \"Sep-1982\",\n    10\n  ],\n  [\n    \"Oct-1982\",\n    9.5\n  ],\n  [\n    \"Nov-1982\",\n    9\n  ],\n  [\n    \"Dec-1982\",\n    8.5\n  ],\n  [\n    \"Jan-1983\",\n    8.5\n  ],\n  [\n    \"Feb-1983\",\n    8.5\n  ],\n  [\n    \"Mar-1983\",\n    8.5\n  ],\n  [\n    \"Apr-1983\",\n    8.5\n  ],\n  [\n    \"May-1983\",\n    9.63\n  ],\n  [\n    \"Jun-1983\",\n    9.63\n  ],\n  [\n    \"Jul-1983\",\n    9.63\n  ],\n  [\n    \"Aug-1983\",\n    9.5\n  ],\n  [\n    \"Sep-1983\",\n    9.5\n  ],\n  [\n    \"Oct-1983\",\n    9.5\n  ],\n  [\n    \"Nov-1983\",\n    9.5\n  ],\n  [\n    \"Dec-1983\",\n    9.5\n  ],\n  [\n    \"Jan-1984\",\n    9.5\n  ],\n  [\n    \"Feb-1984\",\n    9.5\n  ],\n  [\n    \"Mar-1984\",\n    10.5\n  ],\n  [\n    \"Apr-1984\",\n    10.5\n  ],\n  [\n    \"May-1984\",\n    10.5\n  ],\n  [\n    \"Dec-2001\",\n    1.75\n  ],\n  [\n    \"Jan-2002\",\n    1.75\n  ],\n  [\n    \"Feb-2002\",\n    1.75\n  ],\n  [\n    \"Mar-2002\",\n    1.75\n  ],\n  [\n    \"Apr-2002\",\n    1.75\n  ],\n  [\n    \"May-2002\",\n    1.75\n  ],\n  [\n    \"Jun-2002\",\n    1.75\n  ],\n  [\n    \"Jul-2002\",\n    1.75\n  ],\n  [\n    \"Aug-2002\",\n    1.75\n  ],\n  [\n    \"Sep-2002\",\n    1.75\n  ],\n  [\n    \"Oct-2002\",\n    1.75\n  ],\n  [\n    \"Nov-2002\",\n    1.25\n  ],\n  [\n    \"Dec-2002\",\n    1.25\n  ],\n  [\n    \"Jan-2003\",\n    1.25\n  ],\n  [\n    \"Feb-2003\",\n    1.25\n  ],\n  [\n    \"Mar-2003\",\n    1.25\n  ],\n  [\n    \"Apr-2003\",\n    1.25\n  ],\n  [\n    \"May-2003\",\n    1.25\n  ],\n  [\n    \"Jun-2003\",\n    1\n  ],\n  [\n    \"Jul-2003\",\n    1\n  ],\n  [\n    \"Aug-2003\",\n    1\n  ],\n  [\n    \"Sep-2003\",\n    1\n  ],\n  [\n    \"Oct-2003\",\n    1\n  ],\n  [\n    \"Nov-2003\",\n    1\n  ],\n  [\n    \"Dec-2003\",\n    1\n  ],\n  [\n    \"Jan-2004\",\n    1\n  ],\n  [\n    \"Feb-2004\",\n    1\n  ],\n  [\n    \"Mar-2004\",\n    1\n  ],\n  [\n    \"Apr-2004\",\n    1\n  ],\n  [\n    \"May-2004\",\n    1\n  ],\n  [\n    \"Jun-2004\",\n    1.25\n  ],\n  [\n    \"Jul-2004\",\n    1.25\n  ],\n  [\n    \"Aug-2004\",\n    1.5\n  ],\n  [\n    \"Sep-2004\",\n    1.75\n  ],\n  [\n    \"Oct-2004\",\n    1.75\n  ],\n  [\n    \"Nov-2004\",\n    2\n  ],\n  [\n    \"Dec-2004\",\n    2.25\n  ],\n  [\n    \"Jan-2005\",\n    2.25\n  ],\n  [\n    \"Feb-2005\",\n    2.5\n  ],\n  [\n    \"Mar-2005\",\n    2.75\n  ],\n  [\n    \"Apr-2005\",\n    2.75\n  ],\n  [\n    \"May-2005\",\n    3\n  ],\n  [\n    \"Jun-2005\",\n    3.25\n  ],\n  [\n    \"Jul-2005\",\n    3.25\n  ],\n  [\n    \"Aug-2005\",\n    3.5\n  ],\n  [\n    \"Sep-2005\",\n    3.75\n  ],\n  [\n    \"Oct-2005\",\n    3.75\n  ],\n  [\n    \"Nov-2005\",\n    4\n  ],\n  [\n    \"Dec-2005\",\n    4.25\n  ],\n  [\n    \"Jan-2006\",\n    4.5\n  ],\n  [\n    \"Feb-2006\",\n    4.5\n  ],\n  [\n    \"Mar-2006\",\n    4.75\n  ],\n  [\n    \"Apr-2006\",\n    4.75\n  ],\n  [\n    \"May-2006\",\n    5\n  ],\n  [\n    \"Jun-2006\",\n    5.25\n  ],\n  [\n    \"Jul-2006\",\n    5.25\n  ],\n  [\n    \"Aug-2006\",\n    5.25\n  ],\n  [\n    \"Sep-2006\",\n    5.25\n  ],\n  [\n    \"Oct-2006\",\n    5.25\n  ],\n  [\n    \"Nov-2006\",\n    5.25\n  ],\n  [\n    \"Dec-2006\",\n    5.25\n  ],\n  [\n    \"Jan-2007\",\n    5.25\n  ],\n  [\n    \"Feb-2007\",\n    5.25\n  ],\n  [\n    \"Mar-2007\",\n    5.25\n  ],\n  [\n    \"Apr-2007\",\n    5.25\n  ],\n  [\n    \"May-2007\",\n    5.25\n  ],\n  [\n    \"Jun-2007\",\n    5.25\n  ],\n  [\n    \"Jul-2007\",\n    5.25\n  ],\n  [\n    \"Aug-2007\",\n    5.25\n  ],\n  [\n    \"Sep-2007\",\n    4.75\n  ],\n  [\n    \"Oct-2007\",\n    4.5\n  ],\n  [\n    \"Nov-2007\",\n    4.5\n  ],\n  [\n    \"Dec-2007\",\n    4.25\n  ],\n  [\n    \"Jan-2008\",\n    3\n  ],\n  [\n    \"Feb-2008\",\n    3\n  ],\n  [\n    \"Mar-2008\",\n    2.25\n  ],\n  [\n    \"Apr-2008\",\n    2\n  ],\n  [\n    \"May-2008\",\n    2\n  ],\n  [\n    \"Jun-2008\",\n    2\n  ],\n  [\n    \"Jul-2008\",\n    2\n  ],\n  [\n    \"Aug-2008\",\n    2\n  ],\n  [\n    \"Sep-2008\",\n    2\n  ],\n  [\n    \"Oct-2008\",\n    1\n  ],\n  [\n    \"Nov-2008\",\n    1\n  ],\n  [\n    \"Dec-2008\",\n    0.125\n  ],\n  [\n    \"Jan-2009\",\n    0.125\n  ],\n  [\n    \"Feb-2009\",\n    0.125\n  ],\n  [\n    \"Mar-2009\",\n    0.125\n  ],\n  [\n    \"Apr-2009\",\n    0.125\n  ],\n  [\n    \"May-2009\",\n    0.125\n  ],\n  [\n    \"Jun-2009\",\n    0.125\n  ],\n  [\n    \"Jul-2009\",\n    0.125\n  ],\n  [\n    \"Aug-2009\",\n    0.125\n  ],\n  [\n    \"Sep-2009\",\n    0.125\n  ],\n  [\n    \"Oct-2009\",\n    0.125\n  ],\n  [\n    \"Nov-2009\",\n    0.125\n  ],\n  [\n    \"Dec-2009\",\n    0.125\n  ],\n  [\n    \"Jan-2010\",\n    0.125\n  ],\n  [\n    \"Feb-2010\",\n    0.125\n  ],\n  [\n    \"Mar-2010\",\n    0.125\n  ],\n  [\n    \"Apr-2010\",\n    0.125\n  ],\n  [\n    \"May-2010\",\n    0.125\n  ],\n  [\n    \"Jun-2010\",\n    0.125\n  ],\n  [\n    \"Jul-2010\",\n    0.125\n  ],\n  [\n    \"Aug-2010\",\n    0.125\n  ],\n  [\n    \"Sep-2010\",\n    0.125\n  ],\n  [\n    \"Oct-2010\",\n    0.125\n  ],\n  [\n    \"Nov-2010\",\n    0.125\n  ],\n  [\n    \"Dec-2010\",\n    0.125\n  ],\n  [\n    \"Jan-2011\",\n    0.125\n  ],\n  [\n    \"Feb-2011\",\n    0.125\n  ],\n  [\n    \"Mar-2011\",\n    0.125\n  ],\n  [\n    \"Apr-2011\",\n    0.125\n  ],\n  [\n    \"May-2011\",\n    0.125\n  ],\n  [\n    \"Jun-2011\",\n    0.125\n  ],\n  [\n    \"Jul-2011\",\n    0.125\n  ],\n  [\n    \"Aug-2011\",\n    0.125\n  ],\n  [\n    \"Sep-2011\",\n    0.125\n  ],\n  [\n    \"Oct-2011\",\n    0.125\n  ]\n]"
    },
    "21": {
      "type": "FusionTime",
      "title": "Date range event overlay",
      "desc": "Plotting an event marker as a band, to indicate an event that spans a data range.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "date-event-overlay",
      "className": "DateEventOverlay",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/single-event-overlay-data.json",
      "schema": "[\n  {\n    \"name\": \"Time\",\n    \"type\": \"date\",\n    \"format\": \"%b-%Y\"\n  },\n  {\n    \"name\": \"Interest Rate\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/date-range-event-overlay-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/date-range-event-overlay-schema.json'\n).then(jsonify);\n\nclass DateEventOverlay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '800',\n        height: '600',\n        dataSource: {\n          caption: {\n            text: 'Interest Rate Analysis'\n          },\n          subCaption: {\n            text: 'Federal Reserve (USA)'\n          },\n          yAxis: [\n            {\n              plot: 'Interest Rate',\n              format: {\n                suffix: '%'\n              },\n              title: 'Interest Rate'\n            }\n          ],\n          xAxis: {\n            plot: 'Time',\n            timemarker: [\n              {\n                start: 'Jul-1981',\n                end: 'Nov-1982',\n                label:\n                  'Economic downturn was triggered by {br} tight monetary policy in an effort to {br} fight mounting inflation.',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Jul-1990',\n                end: 'Mar-1991',\n                label:\n                  'This eight month recession period {br} was characterized by a sluggish employment recovery, {br} most commonly referred to as a jobless recovery.',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Jun-2004',\n                end: 'Jul-2006',\n                label:\n                  'The Fed after raising interest rates {br} at 17 consecutive meetings, ends its campaign {br} to slow the economy and forestall inflation.',\n                timeFormat: '%b-%Y'\n              },\n              {\n                start: 'Dec-2007',\n                end: 'Jun-2009',\n                label:\n                  'Recession caused by the worst {br} collapse of financial system in recent {br} times.',\n                timeFormat: '%b-%Y'\n              }\n            ]\n          },\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default DateEventOverlay;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/date-range-event-overlay-data.json\n[\n  [\n    \"Jan-1980\",\n    14\n  ],\n  [\n    \"Feb-1980\",\n    20\n  ],\n  [\n    \"Mar-1980\",\n    20\n  ],\n  [\n    \"Apr-1980\",\n    11.5\n  ],\n  [\n    \"May-1980\",\n    11.5\n  ],\n  [\n    \"Jun-1980\",\n    9.75\n  ],\n  [\n    \"Jul-1980\",\n    9.5\n  ],\n  [\n    \"Aug-1980\",\n    10\n  ],\n  [\n    \"Sep-1980\",\n    12\n  ],\n  [\n    \"Oct-1980\",\n    13.75\n  ],\n  [\n    \"Nov-1980\",\n    18\n  ],\n  [\n    \"Dec-1980\",\n    18\n  ],\n  [\n    \"Jan-1981\",\n    16\n  ],\n  [\n    \"Feb-1981\",\n    16\n  ],\n  [\n    \"Mar-1981\",\n    16\n  ],\n  [\n    \"Apr-1981\",\n    16\n  ],\n  [\n    \"May-1981\",\n    20\n  ],\n  [\n    \"Jun-1981\",\n    20\n  ],\n  [\n    \"Jul-1981\",\n    20\n  ],\n  [\n    \"Aug-1981\",\n    20\n  ],\n  [\n    \"Sep-1981\",\n    20\n  ],\n  [\n    \"Oct-1981\",\n    20\n  ],\n  [\n    \"Nov-1981\",\n    13\n  ],\n  [\n    \"Dec-1981\",\n    12\n  ],\n  [\n    \"Jan-1982\",\n    15\n  ],\n  [\n    \"Feb-1982\",\n    15\n  ],\n  [\n    \"Mar-1982\",\n    15\n  ],\n  [\n    \"Apr-1982\",\n    13\n  ],\n  [\n    \"May-1982\",\n    13\n  ],\n  [\n    \"Jun-1982\",\n    13\n  ],\n  [\n    \"Jul-1982\",\n    12\n  ],\n  [\n    \"Aug-1982\",\n    9.5\n  ],\n  [\n    \"Sep-1982\",\n    10\n  ],\n  [\n    \"Oct-1982\",\n    9.5\n  ],\n  [\n    \"Nov-1982\",\n    9\n  ],\n  [\n    \"Dec-1982\",\n    8.5\n  ],\n  [\n    \"Jan-1983\",\n    8.5\n  ],\n  [\n    \"Feb-1983\",\n    8.5\n  ],\n  [\n    \"Mar-1983\",\n    8.5\n  ],\n  [\n    \"Apr-1983\",\n    8.5\n  ],\n  [\n    \"May-1983\",\n    9.63\n  ],\n  [\n    \"Jun-1983\",\n    9.63\n  ],\n  [\n    \"Jul-1983\",\n    9.63\n  ],\n  [\n    \"Aug-1983\",\n    9.5\n  ],\n  [\n    \"Sep-1983\",\n    9.5\n  ],\n  [\n    \"Oct-1983\",\n    9.5\n  ],\n  [\n    \"Nov-1983\",\n    9.5\n  ],\n  [\n    \"Dec-1983\",\n    9.5\n  ],\n  [\n    \"Jan-1984\",\n    9.5\n  ],\n  [\n    \"Feb-1984\",\n    9.5\n  ],\n  [\n    \"Mar-1984\",\n    10.5\n  ],\n  [\n    \"Apr-1984\",\n    10.5\n  ],\n  [\n    \"May-1984\",\n    10.5\n  ],\n  [\n    \"Jun-1984\",\n    11\n  ],\n  [\n    \"Jul-1984\",\n    11.75\n  ],\n  [\n    \"Aug-1984\",\n    11.75\n  ],\n  [\n    \"Sep-1984\",\n    10\n  ],\n  [\n    \"Oct-1984\",\n    10\n  ],\n  [\n    \"Nov-1984\",\n    9\n  ],\n  [\n    \"Dec-1984\",\n    8.25\n  ],\n  [\n    \"Jan-1985\",\n    8.25\n  ],\n  [\n    \"Feb-1985\",\n    9\n  ],\n  [\n    \"Mar-1985\",\n    8.5\n  ],\n  [\n    \"Apr-1985\",\n    8.25\n  ],\n  [\n    \"May-1985\",\n    7.75\n  ],\n  [\n    \"Jun-1985\",\n    7.75\n  ],\n  [\n    \"Jul-1985\",\n    8\n  ],\n  [\n    \"Aug-1985\",\n    8\n  ],\n  [\n    \"Sep-1985\",\n    8\n  ],\n  [\n    \"Oct-1985\",\n    8\n  ],\n  [\n    \"Nov-1985\",\n    8\n  ],\n  [\n    \"Dec-1985\",\n    7.75\n  ],\n  [\n    \"Jan-1986\",\n    7.75\n  ],\n  [\n    \"Feb-1986\",\n    7.75\n  ],\n  [\n    \"Mar-1986\",\n    7.25\n  ],\n  [\n    \"Apr-1986\",\n    6.75\n  ],\n  [\n    \"May-1986\",\n    6.88\n  ],\n  [\n    \"Jun-1986\",\n    6.88\n  ],\n  [\n    \"Jul-1986\",\n    6.38\n  ],\n  [\n    \"Aug-1986\",\n    5.88\n  ],\n  [\n    \"Sep-1986\",\n    5.88\n  ],\n  [\n    \"Oct-1986\",\n    5.88\n  ],\n  [\n    \"Nov-1986\",\n    5.88\n  ],\n  [\n    \"Dec-1986\",\n    6\n  ],\n  [\n    \"Jan-1987\",\n    6\n  ],\n  [\n    \"Feb-1987\",\n    6\n  ],\n  [\n    \"Mar-1987\",\n    6\n  ],\n  [\n    \"Apr-1987\",\n    6.75\n  ],\n  [\n    \"May-1987\",\n    6.75\n  ],\n  [\n    \"Jun-1987\",\n    6.75\n  ],\n  [\n    \"Jul-1987\",\n    6.75\n  ]\n]"
    },
    "22": {
      "type": "FusionCharts",
      "title": "World Map",
      "desc": "World map showing data for different continents",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "simple-map",
      "className": "SimpleMap",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Maps from 'fusioncharts/fusioncharts.maps';\nimport World from 'fusioncharts/maps/fusioncharts.world';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Maps, World, FusionTheme);\n\nconst chartConfigs = {\n  type: 'world',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return <ReactFC {...chartConfigs} />;\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Average Annual Population Growth\",\r\n        \"subcaption\": \" 1955-2015\",\r\n        \"numbersuffix\": \"%\",\r\n        \"includevalueinlabels\": \"1\",\r\n        \"labelsepchar\": \": \",\r\n        \"entityFillHoverColor\": \"#FFF9C4\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"colorrange\": {\r\n        \"minvalue\": \"0\",\r\n        \"code\": \"#FFE0B2\",\r\n        \"gradient\": \"1\",\r\n        \"color\": [\r\n            {\r\n                \"minvalue\": \"0.5\",\r\n                \"maxvalue\": \"1.0\",\r\n                \"color\": \"#FFD74D\"\r\n            },\r\n            {\r\n                \"minvalue\": \"1.0\",\r\n                \"maxvalue\": \"2.0\",\r\n                \"color\": \"#FB8C00\"\r\n            },\r\n            {\r\n                \"minvalue\": \"2.0\",\r\n                \"maxvalue\": \"3.0\",\r\n                \"color\": \"#E65100\"\r\n            }\r\n        ]\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"id\": \"NA\",\r\n            \"value\": \".82\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"SA\",\r\n            \"value\": \"2.04\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"AS\",\r\n            \"value\": \"1.78\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"EU\",\r\n            \"value\": \".40\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"AF\",\r\n            \"value\": \"2.58\",\r\n            \"showLabel\": \"1\"\r\n        },\r\n        {\r\n            \"id\": \"AU\",\r\n            \"value\": \"1.30\",\r\n            \"showLabel\": \"1\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "23": {
      "type": "FusionCharts",
      "title": "Export multiple charts",
      "desc": "Use Batch Export Feature to export multiple charts as a single image/PDF",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/TL2qJgny5sGkTlf4umN0/"
      },
      "directory": "client-side-exporting",
      "className": "ClientSideExporting",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chart1Configs = {\n  type: 'column2d',\n  width: 700,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\nconst chart2Configs = {\n  type: 'stackedcolumn2d',\n  width: 600,\n  height: 500,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n    this.exportChart = this.exportChart.bind(this);\n  }\n\n  // Handler for export button.\n  // Fires an export operation which exports all charts on the page as a PDF.\n  exportChart(e) {\n    FusionCharts.batchExport({\n      exportFormat: 'pdf',\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC {...chart1Configs} />\n        <ReactFC {...chart2Configs} />\n        <center>\n          <button\n            className='btn btn-outline-secondary btn-sm'\n            onClick={this.exportChart}\n          >\n            Export both charts as a single PDF\n          </button>\n        </center>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    data1: {\r\n        \"chart\": {\r\n            \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n            \"subCaption\": \"In MMbbl = One Million barrels\",\r\n            \"xAxisName\": \"Country\",\r\n            \"yAxisName\": \"Reserves (MMbbl)\",\r\n            \"numberSuffix\": \"K\",\r\n            \"theme\": \"fusion\"\r\n        },\r\n        \"data\": [\r\n            {\r\n                \"label\": \"Venezuela\",\r\n                \"value\": \"290\"\r\n            },\r\n            {\r\n                \"label\": \"Saudi\",\r\n                \"value\": \"260\"\r\n            },\r\n            {\r\n                \"label\": \"Canada\",\r\n                \"value\": \"180\"\r\n            },\r\n            {\r\n                \"label\": \"Iran\",\r\n                \"value\": \"140\"\r\n            },\r\n            {\r\n                \"label\": \"Russia\",\r\n                \"value\": \"115\"\r\n            },\r\n            {\r\n                \"label\": \"UAE\",\r\n                \"value\": \"100\"\r\n            },\r\n            {\r\n                \"label\": \"US\",\r\n                \"value\": \"30\"\r\n            },\r\n            {\r\n                \"label\": \"China\",\r\n                \"value\": \"30\"\r\n            }\r\n        ]\r\n    },\r\n    data2: {\r\n        \"chart\": {\r\n            \"caption\": \"Yearly Energy Production Rate\",\r\n            \"subCaption\": \" Top 5 Developed Countries\",\r\n            \"numbersuffix\": \" TWh\",\r\n            \"showSum\": \"1\",\r\n            \"plotToolText\": \"$label produces <b>$dataValue</b> of energy from $seriesName\",\r\n            \"theme\": \"fusion\"\r\n        },\r\n        \"categories\": [\r\n            {\r\n                \"category\": [\r\n                    {\r\n                        \"label\": \"Canada\"\r\n                    },\r\n                    {\r\n                        \"label\": \"China\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Russia\"\r\n                    },\r\n                    {\r\n                        \"label\": \"Australia\"\r\n                    },\r\n                    {\r\n                        \"label\": \"United States\"\r\n                    },\r\n                    {\r\n                        \"label\": \"France\"\r\n                    }\r\n                ]\r\n            }\r\n        ],\r\n        \"dataSet\": [\r\n            {\r\n                \"seriesName\": \"Coal\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"400\"\r\n                    },\r\n                    {\r\n                        \"value\": \"830\"\r\n                    },\r\n                    {\r\n                        \"value\": \"500\"\r\n                    },\r\n                    {\r\n                        \"value\": \"420\"\r\n                    },\r\n                    {\r\n                        \"value\": \"790\"\r\n                    },\r\n                    {\r\n                        \"value\": \"380\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Hydro\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"350\"\r\n                    },\r\n                    {\r\n                        \"value\": \"620\"\r\n                    },\r\n                    {\r\n                        \"value\": \"410\"\r\n                    },\r\n                    {\r\n                        \"value\": \"370\"\r\n                    },\r\n                    {\r\n                        \"value\": \"720\"\r\n                    },\r\n                    {\r\n                        \"value\": \"310\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Nuclear\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"210\"\r\n                    },\r\n                    {\r\n                        \"value\": \"400\"\r\n                    },\r\n                    {\r\n                        \"value\": \"450\"\r\n                    },\r\n                    {\r\n                        \"value\": \"180\"\r\n                    },\r\n                    {\r\n                        \"value\": \"570\"\r\n                    },\r\n                    {\r\n                        \"value\": \"270\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Gas\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"180\"\r\n                    },\r\n                    {\r\n                        \"value\": \"330\"\r\n                    },\r\n                    {\r\n                        \"value\": \"230\"\r\n                    },\r\n                    {\r\n                        \"value\": \"160\"\r\n                    },\r\n                    {\r\n                        \"value\": \"440\"\r\n                    },\r\n                    {\r\n                        \"value\": \"350\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"seriesName\": \"Oil\",\r\n                \"data\": [\r\n                    {\r\n                        \"value\": \"60\"\r\n                    },\r\n                    {\r\n                        \"value\": \"200\"\r\n                    },\r\n                    {\r\n                        \"value\": \"200\"\r\n                    },\r\n                    {\r\n                        \"value\": \"50\"\r\n                    },\r\n                    {\r\n                        \"value\": \"230\"\r\n                    },\r\n                    {\r\n                        \"value\": \"150\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}\r\n"
    },
    "24": {
      "type": "FusionCharts",
      "title": "Special events",
      "desc": "Drag a projected column to see its change",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "special-events",
      "className": "SpecialEvents",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport PowerCharts from 'fusioncharts/fusioncharts.powercharts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, PowerCharts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'dragcolumn2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ }\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: 'Drag any column for years 2017 or 2018 to see updated value along with the label',\n    };\n\n    this.dataplotDragEnd = this.dataplotDragEnd.bind(this);\n  }\n\n  // Event callback handler for 'dataplotDragEnd' event.\n  // Shows a message with the dateset, initial value and final value of the dragged column.\n  dataplotDragEnd(eventObj, dataObj) {\n    var prevValue = FusionCharts.formatNumber(dataObj.startValue.toFixed(2));\n    var curValue = FusionCharts.formatNumber(dataObj.endValue.toFixed(2));\n    var labelYear = this.state.chart.args.dataSource.categories[0].category[dataObj.dataIndex].label\n    this.setState({\n      message: [\n        <strong>{eventObj.data.datasetName}</strong>,\n        \" is modified to \",\n        <strong>{'$' + curValue + 'M'}</strong>,\n        \" from \",\n        <strong>{'$' + prevValue + 'M'}</strong>,\n        \" for \",\n        <strong>{labelYear}</strong>\n      ]\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC\n          {...chartConfigs}\n          fcEvent-dataplotDragEnd={this.dataplotDragEnd}\n        />\n        <p style={{ padding: '10px', background: '#f5f2f0' }}>\n          {this.state.message}\n        </p>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Android and iOS Devices Sales Projections\",\r\n        \"subCaption\": \"Drag the top of columns to adjust projections for 2017 & 2018\",\r\n        \"numberPrefix\": \"$\",\r\n        \"numberSuffix\": \"M\",\r\n        \"yaxismaxvalue\": \"200\",\r\n        \"theme\": \"fusion\",\r\n        \"plotToolText\": \"<b>$label</b><br>$seriesName: <b>$dataValue</b>\"\r\n    },\r\n    \"categories\": [\r\n        {\r\n            \"category\": [\r\n                {\r\n                    \"label\": \"2014\",\r\n                    \"fontItalic\": \"0\"\r\n                },\r\n                {\r\n                    \"label\": \"2015\",\r\n                    \"fontItalic\": \"0\"\r\n                },\r\n                {\r\n                    \"label\": \"2016\",\r\n                    \"fontItalic\": \"0\"\r\n                },\r\n                {\r\n                    \"label\": \"2017 (Projected)\"\r\n                },\r\n                {\r\n                    \"label\": \"2018 (Projected)\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"dataset\": [\r\n        {\r\n            \"seriesname\": \"Android Devices\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"73\",\r\n                    \"alpha\": \"100\",\r\n                    \"allowDrag\": \"0\"\r\n                },\r\n                {\r\n                    \"value\": \"80\",\r\n                    \"alpha\": \"100\",\r\n                    \"allowDrag\": \"0\"\r\n                },\r\n                {\r\n                    \"value\": \"97\",\r\n                    \"alpha\": \"100\",\r\n                    \"allowDrag\": \"0\"\r\n                },\r\n                {\r\n                    \"value\": \"110\",\r\n                    \"toolText\": \"<b>$label</b><br>$seriesName: <b>$dataValue</b>\"\r\n                },\r\n                {\r\n                    \"value\": \"180\",\r\n                    \"toolText\": \"<b>$label</b><br>$seriesName: <b>$dataValue</b>\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"seriesname\": \"iOS Devices\",\r\n            \"data\": [\r\n                {\r\n                    \"value\": \"63.2\",\r\n                    \"alpha\": \"100\",\r\n                    \"allowDrag\": \"0\"\r\n                },\r\n                {\r\n                    \"value\": \"68\",\r\n                    \"alpha\": \"100\",\r\n                    \"allowDrag\": \"0\"\r\n                },\r\n                {\r\n                    \"value\": \"82\",\r\n                    \"alpha\": \"100\",\r\n                    \"allowDrag\": \"0\"\r\n                },\r\n                {\r\n                    \"value\": \"99\",\r\n                    \"toolText\": \"<b>$label</b><br>$seriesName: <b>$dataValue</b>\"\r\n                },\r\n                {\r\n                    \"value\": \"150\",\r\n                    \"toolText\": \"<b>$label</b><br>$seriesName: <b>$dataValue</b>\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}\r\n"
    },
    "25": {
      "type": "FusionCharts",
      "title": "Lifecycle events",
      "desc": "This sample lists the basic lifecycle events at the time of rendering FusionCharts.",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "lifecycle-events",
      "className": "LifecycleEvents",
      "code": "import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport FusionCharts from \"fusioncharts\";\nimport Charts from \"fusioncharts/fusioncharts.charts\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: \"column2d\",\n  width: 600,\n  height: 400,\n  dataFormat: \"json\",\n  dataSource: {\n    /* see data tab */\n  }\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message:\n        \"You will see a notifications here for the chart lifecycle events\"\n    };\n\n    this.beforeDataUpdate = this.beforeDataUpdate.bind(this);\n    this.dataUpdated = this.dataUpdated.bind(this);\n    this.drawComplete = this.drawComplete.bind(this);\n    this.renderComplete = this.renderComplete.bind(this);\n  }\n\n  // Callback handler for event 'beforeDataUpdate'.\n  beforeDataUpdate() {\n    this.state.message = [<strong>Status: </strong>, \" beforeDataUpdate\"];\n  }\n\n  // Callback handler for event 'dataUpdated'.\n  dataUpdated() {\n    let newMessage = this.state.message.slice();\n    newMessage.push(\", dataUpdated\");\n    this.setState({\n      message: newMessage\n    });\n  }\n\n  // Callback handler for event 'drawComplete'.\n  drawComplete() {\n    let newMessage = this.state.message.slice();\n    newMessage.push(\", drawComplete\");\n    this.setState({\n      message: newMessage\n    });\n  }\n\n  // Callback handler for event 'renderComplete'.\n  renderComplete() {\n    let newMessage = this.state.message.slice();\n    newMessage.push(\", renderComplete\");\n    this.setState({\n      message: newMessage\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC\n          {...chartConfigs}\n          fcEvent-beforeDataUpdate={this.beforeDataUpdate}\n          fcEvent-dataUpdated={this.dataUpdated}\n          fcEvent-drawComplete={this.drawComplete}\n          fcEvent-renderComplete={this.renderComplete}\n        />\n        <p style={{ padding: \"10px\", background: \"#f5f2f0\" }}>\n          {this.state.message}\n        </p>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Chart />, document.getElementById(\"root\"));\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "26": {
      "type": "FusionCharts",
      "title": "Dynamically add chart event listener",
      "desc": "How you can dynamically(runtime) add & remove chart specific events in FusionCharts",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "dynamic-event-listening",
      "className": "DynamicEventListening",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: '600',\n  height: '400',\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ }\n};\n\nvar defaultMessage = 'Click on the plot to see the value along with the label';\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: '',\n      enabled: false\n    }\n\n    this.trackPlotClick = this.trackPlotClick.bind(this);\n    this.resetChart = this.resetChart.bind(this);\n    this.dataPlotClick = this.dataPlotClick.bind(this);\n  }\n\n  // Handler for 'Track Data Plot Clicks' button.\n  // 1. Adds an eventlistener for data plot cick on the chart\n  // 2. Sets the default message when data plot click tracking is enabled\n  trackPlotClick() {\n    FusionCharts.addEventListener('dataplotClick', this.dataPlotClick);\n    this.setState({\n      message: defaultMessage,\n      enabled: true\n    });\n  }\n\n  // Event listener for dataplotclick event on chart. Update message with data plot values.\n  dataPlotClick(eventObj, dataObj) {\n    this.setState({\n      message: [\n        'You have clicked on plot ',\n        <strong>{dataObj.categoryLabel}</strong>,\n        ' whose value is ',\n        <strong>{dataObj.displayValue}</strong>\n      ]\n    });\n  }\n\n  // Handler for 'Reset' button.\n  // Resets the chart to default message and removed the event listener.\n  resetChart() {\n    FusionCharts.removeEventListener('dataplotClick', this.dataPlotClick);\n    this.setState({\n      message: '',\n      enabled: false\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} />\n        <div style={{ padding: '5px' }} id=\"message\">\n          { this.state.message || 'Click the below buttons to add an event dynamically to a charts' }\n        </div>\n        <button\n          className='btn btn-outline-secondary btn-sm'\n          disabled={this.state.enabled}\n          onClick={this.trackPlotClick}\n        >\n          Add/ listen to data plot click event\n        </button>\n        <button\n          className='btn btn-outline-secondary btn-sm'\n          disabled={!this.state.enabled}\n          onClick={this.resetChart}\n        >\n          Remove data plot click event\n        </button>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "27": {
      "type": "FusionCharts",
      "title": "Slice data plots",
      "desc": "Use Chart specific custom API",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "slice-data-plots",
      "className": "SliceDataPlots",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'Pie2D',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ }\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: {},\n      currentVal: 'none'\n    }\n\n    this.renderComplete = this.renderComplete.bind(this);\n    this.radioHandler = this.radioHandler.bind(this);\n    this.sliceClicked = this.sliceClicked.bind(this);\n  }\n\n  renderComplete(chart) {\n    this.setState({ chart });\n  }\n\n  // Handler for radio buttons to slice data plot.\n  radioHandler(e) {\n    if (e.currentTarget.value === 'none') {\n      this.state.chart.options.dataSource.data.map((data, index) => {\n        this.state.chart.slicePlotItem(index, false);\n      });\n    } else {\n      this.state.chart.slicePlotItem(e.currentTarget.value, true);\n    }\n    this.setState({\n      currentVal: e.currentTarget.value\n    });\n  }\n\n  // Event callback for 'dataplotClick'.\n  // Makes the relevant radio active when a plot is clicked.\n  sliceClicked(eventObj, dataObj) {\n    this.setState({\n      currentVal: eventObj.data.isSliced ? 'none' : eventObj.data.dataIndex\n    });\n  }\n\n  render () {\n    return (\n      <div>\n        <ReactFC\n          {...chartConfigs}\n          onRender={this.renderComplete}\n          fcEvent-dataplotClick={this.sliceClicked}\n        />\n        <br />\n        <center>\n          <span>Slice out:</span>\n          <div className=\"change-type\">\n            <div>\n              <input\n                type=\"radio\"\n                value=\"none\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'none'}\n              />\n              <label>None</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"0\"\n                onChange={this.radioHandler}\n                checked={parseInt(this.state.currentVal) === 0}\n              />\n              <label>Apache</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"1\"\n                onChange={this.radioHandler}\n                checked={parseInt(this.state.currentVal) === 1}\n              />\n              <label>Microsoft</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\" \n                value=\"2\"\n                onChange={this.radioHandler}\n                checked={parseInt(this.state.currentVal) === 2}\n              />\n              <label>Zeus</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"3\"\n                onChange={this.radioHandler}\n                checked={parseInt(this.state.currentVal) === 3}\n              />\n              <label>Other</label>\n            </div>\n          </div>\n        </center>\n      </div>\n    )\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\n    \"chart\": {\n    \"caption\": \"Market Share of Web Servers\",\n    \"plottooltext\": \"<b>$percentValue</b> of web servers run on $label servers\",\n    \"showPercentValues\": \"1\",\n    \"useDataPlotColorForLabels\": \"1\",\n    \"enableMultiSlicing\": \"0\",\n    \"theme\": \"fusion\"\n    },\n    \"data\": [\n        {\n            \"label\": \"Apache\",\n            \"value\": \"32647479\"\n        },\n        {\n            \"label\": \"Microsoft\",\n            \"value\": \"22100932\"\n        }, {\n            \"label\": \"Zeus\",\n            \"value\": \"14376\"\n        }, {\n            \"label\": \"Other\",\n            \"value\": \"18674221\"\n        }\n    ]\n}\n"
    },
    "28": {
      "type": "FusionCharts",
      "title": "Responsive charts",
      "desc": "Select any of the dimensions given in the list. The chart adjusts itself to its alloted percentage",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "responsive-charts",
      "className": "ResponsiveCharts",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: '600',\n  height: '350',\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: {},\n      currentVal: 'medium'\n    };\n\n    this.renderComplete = this.renderComplete.bind(this);\n    this.radioHandler = this.radioHandler.bind(this);\n  }\n\n  renderComplete(chart) {\n    this.setState({chart});\n  }\n\n  // Handler for radio buttons to change chart size.\n  radioHandler(e) {\n    switch(e.currentTarget.value) {\n      case 'small':\n        this.state.chart.resizeTo(400, 250);\n        break;\n\n      case 'medium':\n        this.state.chart.resizeTo(600, 350);\n        break;\n\n      case 'large':\n        this.state.chart.resizeTo(700, 400);\n        break;\n    }\n    this.setState({\n      currentVal: e.currentTarget.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} onRender={this.renderComplete} />\n        <br />\n        <center>\n          <span>Choose a dimension:</span>\n          <div className=\"change-type\">\n            <div>\n              <input\n                type=\"radio\"\n                value=\"small\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'small'} />\n              <label>400 x 250</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"medium\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'medium'}\n              />\n              <label>600 x 350</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"large\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'large'}\n              />\n              <label>700 x 400</label>\n            </div>\n          </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "29": {
      "type": "FusionCharts",
      "title": "Change chart type at run time",
      "desc": "Change the chart type dynamically or at runtime",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/u6SQHYgOsVeJVKKdC0ZB/"
      },
      "directory": "change-chart-type-runtime",
      "className": "ChangeChartTypeRuntime",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: {},\n      currentVal: 'column2d'\n    };\n\n    this.renderComplete = this.renderComplete.bind(this);\n    this.radioHandler = this.radioHandler.bind(this);\n  }\n\n  renderComplete(chart) {\n    this.setState({ chart });\n  }\n\n  // Handler for radio buttons to change chart type.\n  radioHandler(e) {\n    this.state.chart.chartType(e.currentTarget.value);\n    this.setState({\n      currentVal: e.currentTarget.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} onRender={this.renderComplete} />\n        <br />\n        <center>\n          <span>Choose a chart type:</span>\n          <div className=\"change-type\">\n            <div>\n              <input\n                type=\"radio\"\n                value=\"column2d\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'column2d'} />\n              <label>Column 2D Chart</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"bar2d\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'bar2d'} />\n              <label>Bar 2D Chart</label>\n            </div>\n            <div>\n              <input\n                type=\"radio\"\n                value=\"pie2d\"\n                onChange={this.radioHandler}\n                checked={this.state.currentVal === 'pie2d'} />\n              <label>Pie 2D Chart</label>\n            </div>\n          </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Recommended Portfolio Split\",\r\n        \"subCaption\" : \"For a net-worth of $1M\",\r\n        \"showValues\":\"1\",\r\n        \"showPercentInTooltip\" : \"0\",\r\n        \"numberPrefix\" : \"$\",\r\n        \"enableMultiSlicing\":\"1\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Equity\",\r\n            \"value\": \"300000\"\r\n        }, {\r\n            \"label\": \"Debt\",\r\n            \"value\": \"230000\"\r\n        }, {\r\n            \"label\": \"Bullion\",\r\n            \"value\": \"180000\"\r\n        }, {\r\n            \"label\": \"Real-estate\",\r\n            \"value\": \"270000\"\r\n        }, {\r\n            \"label\": \"Insurance\",\r\n            \"value\": \"20000\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "30": {
      "type": "FusionCharts",
      "title": "Use annotations",
      "desc": "Add custom shapes to highlight a specific data point",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "use-annotations",
      "className": "UseAnnotations",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from \"fusioncharts\";\nimport Charts from \"fusioncharts/fusioncharts.charts\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'spline',\n  width: 600,\n  height: 400,\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ },\n};\n\nclass Chart extends Component {\n  render () {\n    return <ReactFC {...chartConfigs} />;\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Bakersfield Central - Total footfalls\",\r\n        \"subCaption\": \"Last week\",\r\n        \"xAxisName\": \"Day\",\r\n        \"yAxisName\": \"No. of Visitors (In 1000s)\",\r\n        \"showValues\": \"0\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"annotations\": {\r\n        \"groups\": [\r\n            {\r\n                \"id\": \"anchor-highlight\",\r\n                \"items\": [\r\n                    {\r\n                        \"id\": \"high-star\",\r\n                        \"type\": \"circle\",\r\n                        \"x\": \"$dataset.0.set.2.x\",\r\n                        \"y\": \"$dataset.0.set.2.y\",\r\n                        \"radius\": \"12\",\r\n                        \"color\": \"#6baa01\",\r\n                        \"border\": \"2\",\r\n                        \"borderColor\": \"#f8bd19\"\r\n                    },\r\n                    {\r\n                        \"id\": \"label\",\r\n                        \"type\": \"text\",\r\n                        \"text\": \"Highest footfall 25.5K\",\r\n                        \"fillcolor\": \"#6baa01\",\r\n                        \"rotate\": \"90\",\r\n                        \"x\": \"$dataset.0.set.2.x+75\",\r\n                        \"y\": \"$dataset.0.set.2.y-2\"\r\n                    }\r\n                ]\r\n            }\r\n        ]\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Mon\",\r\n            \"value\": \"15123\"\r\n        },\r\n        {\r\n            \"label\": \"Tue\",\r\n            \"value\": \"14233\"\r\n        },\r\n        {\r\n            \"label\": \"Wed\",\r\n            \"value\": \"25507\"\r\n        },\r\n        {\r\n            \"label\": \"Thu\",\r\n            \"value\": \"9110\"\r\n        },\r\n        {\r\n            \"label\": \"Fri\",\r\n            \"value\": \"15529\"\r\n        },\r\n        {\r\n            \"label\": \"Sat\",\r\n            \"value\": \"20803\"\r\n        },\r\n        {\r\n            \"label\": \"Sun\",\r\n            \"value\": \"19202\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "31": {
      "type": "FusionCharts",
      "title": "Usage of FusionCharts methods (API)",
      "desc": "Change a chart attribute by calling FusionCharts setChartAttribute API",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/qIKY9suwowEvMvunuX9e/"
      },
      "directory": "ucatm",
      "className": "UCATM",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from \"fusionchart\";\nimport Charts from \"fusioncharts/fusioncharts.charts\";\nimport ReactFC from \"react-fusioncharts\";\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: '600',\n  height: '400',\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ }\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: {}\n    }\n\n    this.renderComplete = this.renderComplete.bind(this);\n    this.changeCaption = this.changeCaption.bind(this);\n    this.changeXAxis = this.changeXAxis.bind(this);\n    this.changeYAxis = this.changeYAxis.bind(this);\n    this.resetChart = this.resetChart.bind(this);\n  }\n\n  // Called by FC-React component to return the rendered chart\n  renderComplete(chart) {\n    this.setState({ chart });\n  }\n\n  // Handler for 'Change Caption' button.\n  // Changes the chart caption.\n  changeCaption() {\n    this.state.chart.setChartAttribute('caption', 'Test Caption');\n  }\n\n  // Handler for 'Change X-Axis Name' button.\n  // Changes the chart X-Axis Name.\n  changeXAxis() {\n    this.state.chart.setChartAttribute('xAxisName', 'Test X-Axis');\n  }\n\n  // Handler for 'Change Y-Axis Name' button.\n  // Changes the chart Y-Axis Name.\n  changeYAxis() {\n    this.state.chart.setChartAttribute('yAxisName', 'Test Y-Axis');\n  }\n\n  // Handler for 'Reset' button.\n  // Resets the chart to the original version.\n  resetChart() {\n    Object.keys(chartConfigs.dataSource.chart).map(i => {\n      this.state.chart.setChartAttribute(i, chartConfigs.dataSource.chart[i]);\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} onRender={this.renderComplete} />\n        <center>\n          <button\n            className=\"btn btn-outline-secondary btn-sm\"\n            onClick={this.changeCaption}\n          >\n            Change Caption: Test Caption\n          </button>\n          <button\n            className=\"btn btn-outline-secondary btn-sm\"\n            onClick={this.changeXAxis}\n          >\n            Change X-Axis Name: Test X-Axis\n          </button>\n          <button\n            className=\"btn btn-outline-secondary btn-sm\"\n            onClick={this.changeYAxis}\n          >\n            Change Y-Axis Name: Test Y-Axis\n          </button>\n          <button\n            className=\"btn btn-outline-secondary btn-sm\"\n            onClick={this.resetChart}\n          >\n            Reset\n          </button>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);",
      "data": "{\r\n    \"chart\": {\r\n        \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n        \"subCaption\": \"In MMbbl = One Million barrels\",\r\n        \"xAxisName\": \"Country\",\r\n        \"yAxisName\": \"Reserves (MMbbl)\",\r\n        \"numberSuffix\": \"K\",\r\n        \"theme\": \"fusion\"\r\n    },\r\n    \"data\": [\r\n        {\r\n            \"label\": \"Venezuela\",\r\n            \"value\": \"290\"\r\n        },\r\n        {\r\n            \"label\": \"Saudi\",\r\n            \"value\": \"260\"\r\n        },\r\n        {\r\n            \"label\": \"Canada\",\r\n            \"value\": \"180\"\r\n        },\r\n        {\r\n            \"label\": \"Iran\",\r\n            \"value\": \"140\"\r\n        },\r\n        {\r\n            \"label\": \"Russia\",\r\n            \"value\": \"115\"\r\n        },\r\n        {\r\n            \"label\": \"UAE\",\r\n            \"value\": \"100\"\r\n        },\r\n        {\r\n            \"label\": \"US\",\r\n            \"value\": \"30\"\r\n        },\r\n        {\r\n            \"label\": \"China\",\r\n            \"value\": \"30\"\r\n        }\r\n    ]\r\n}\r\n"
    },
    "32": {
      "type": "FusionCharts",
      "title": "Applying a different theme",
      "desc": "Choosing from different themes available in FusionCharts Suite",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/EJwgH7aqH2pFsiGjYnXQ/"
      },
      "directory": "apply-theme",
      "className": "ApplyTheme",
      "code": "import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport FusionCharts from 'fusioncharts/core';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport ReactFC from 'react-fusioncharts';\nimport FusionTheme from 'fusioncharts/themes/fusioncharts.theme.fusion';\nimport GammelTheme from 'fusioncharts/themes/fusioncharts.theme.gammel';\nimport CandyTheme from 'fusioncharts/themes/fusioncharts.theme.candy';\nimport ZuneTheme from 'fusioncharts/themes/fusioncharts.theme.zune';\nimport OceanTheme from 'fusioncharts/themes/fusioncharts.theme.ocean';\nimport CarbonTheme from 'fusioncharts/themes/fusioncharts.theme.carbon';\n\nReactFC.fcRoot(FusionCharts, Charts, FusionTheme, GammelTheme, CandyTheme, ZuneTheme, OceanTheme, CarbonTheme);\n\nconst chartConfigs = {\n  type: 'column2d',\n  width: '600',\n  height: '400',\n  dataFormat: 'json',\n  dataSource: {/* see data tab */ }\n};\n\nclass Chart extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chart: {},\n      currentVal: 'fusion'\n    };\n\n    this.renderComplete = this.renderComplete.bind(this);\n    this.radioHandler = this.radioHandler.bind(this);\n  }\n\n  renderComplete(chart) {\n    this.setState({ chart });\n  }\n\n  // Handler for radio buttons to change chart theme.\n  radioHandler(e) {\n    this.state.chart.setChartAttribute('theme', e.currentTarget.value);\n    this.setState({\n      currentVal: e.currentTarget.value\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <ReactFC {...chartConfigs} onRender={this.renderComplete} />\n        <br />\n        <center>\n          <span>Choose a theme:</span>\n          <div className=\"change-type\">\n            <div>\n              <input type=\"radio\" value=\"fusion\" onChange={this.radioHandler} checked={this.state.currentVal === 'fusion'} />\n              <label>Fusion</label>\n            </div>\n            <div>\n              <input type=\"radio\" value=\"gammel\" onChange={this.radioHandler} checked={this.state.currentVal === 'gammel'} />\n              <label>Gammel</label>\n            </div>\n            <div>\n              <input type=\"radio\" value=\"candy\" onChange={this.radioHandler} checked={this.state.currentVal === 'candy'} />\n              <label>Candy</label>\n            </div>\n            <div>\n              <input type=\"radio\" value=\"zune\" onChange={this.radioHandler} checked={this.state.currentVal === 'zune'} />\n              <label>Zune</label>\n            </div>\n            <div>\n              <input type=\"radio\" value=\"ocean\" onChange={this.radioHandler} checked={this.state.currentVal === 'ocean'} />\n              <label>Ocean</label>\n            </div>\n            <div>\n              <input type=\"radio\" value=\"carbon\" onChange={this.radioHandler} checked={this.state.currentVal === 'carbon'} />\n              <label>Carbon</label>\n            </div>\n          </div>\n        </center>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Chart />,\n  document.getElementById('root'),\n);\n",
      "data": "{\r\n  \"chart\": {\r\n      \"caption\": \"Countries With Most Oil Reserves [2017-18]\",\r\n      \"subCaption\": \"In MMbbl = One Million barrels\",\r\n      \"xAxisName\": \"Country\",\r\n      \"yAxisName\": \"Reserves (MMbbl)\",\r\n      \"numberSuffix\": \"K\",\r\n      \"theme\": \"gammel\"\r\n  },\r\n  \"data\": [\r\n      {\r\n          \"label\": \"Venezuela\",\r\n          \"value\": \"290\"\r\n      },\r\n      {\r\n          \"label\": \"Saudi\",\r\n          \"value\": \"260\"\r\n      },\r\n      {\r\n          \"label\": \"Canada\",\r\n          \"value\": \"180\"\r\n      },\r\n      {\r\n          \"label\": \"Iran\",\r\n          \"value\": \"140\"\r\n      },\r\n      {\r\n          \"label\": \"Russia\",\r\n          \"value\": \"115\"\r\n      },\r\n      {\r\n          \"label\": \"UAE\",\r\n          \"value\": \"100\"\r\n      },\r\n      {\r\n          \"label\": \"US\",\r\n          \"value\": \"30\"\r\n      },\r\n      {\r\n          \"label\": \"China\",\r\n          \"value\": \"30\"\r\n      }\r\n  ]\r\n}\r\n"
    },
    "33": {
      "type": "FusionTime",
      "title": "Interactive candlestick chart",
      "desc": "Time-series chart plotted as candlestick, with 4 different values for each plot (open, high, low, close)",
      "logo": "logo.svg",
      "logoHover": "logo-hover.svg",
      "interactiveViewURL": {
        "react-fc": "https://embed.plnkr.co/uFbQ8GUWAVqfLJXpYju6/"
      },
      "directory": "interactive-candlestick-chart",
      "className": "InteractiveCandlestickChart",
      "dataurl": "https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/candlestick-chart-data.json",
      "schema": "[\n  {\n    \"name\": \"Date\",\n    \"type\": \"date\",\n    \"format\": \"%Y-%m-%d\"\n  },\n  {\n    \"name\": \"Open\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"High\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Low\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Close\",\n    \"type\": \"number\"\n  },\n  {\n    \"name\": \"Volume\",\n    \"type\": \"number\"\n  }\n]",
      "code": "import React, { Component } from 'react';\n// Import fusioncharts.js files from fusioncharts module\nimport FusionCharts from 'fusioncharts';\n// Import the timeseries file from fusioncharts module\nimport TimeSeries from 'fusioncharts/fusioncharts.timeseries';\n// Import ReactFusioncharts from react-fusioncharts module\n// import ReactFC from 'react-fusioncharts';\nimport ReactFC from 'react-fusioncharts';\n\n// Add core FusionCharts module and TimeSeries module as dependecies in react-fusioncharts\nReactFC.fcRoot(FusionCharts, TimeSeries);\n\nconst jsonify = res => res.json();\n// This is the remote url to fetch the data.\nconst dataFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/candlestick-chart-data.json'\n).then(jsonify);\n// This is the remote url to fetch the schema.\nconst schemaFetch = fetch(\n  'https://s3.eu-central-1.amazonaws.com/fusion.store/ft/schema/candlestick-chart-schema.json'\n).then(jsonify);\n\nclass InteractiveCandlestickChart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Here timeseriesDs is the configuration object which we will pass as a prop to our ReactFC component.\n      timeseriesDs: {\n        type: 'timeseries',\n        renderAt: 'container',\n        width: '600',\n        height: '400',\n        dataSource: {\n          caption: {\n            text: 'Apple Inc. Stock Price'\n          },\n          yAxis: [\n            {\n              plot: {\n                open: 'Open',\n                high: 'High',\n                low: 'Low',\n                close: 'Close',\n                type: 'candlestick'\n              },\n              title: 'Value'\n            }\n          ],\n          // Initially data is set as null\n          data: null\n        }\n      }\n    };\n\n    // In this method we will create our DataStore and using that we will create a custom DataTable which takes two\n    // parameters, one is data another is schema. Check the method definition to get more info.\n    this.createDataTable = this.createDataTable.bind(this);\n  }\n\n  createDataTable() {\n    Promise.all([dataFetch, schemaFetch]).then(res => {\n      const data = res[0];\n      const schema = res[1];\n      // First we are creating a DataStore\n      const fusionDataStore = new FusionCharts.DataStore();\n      // After that we are creating a DataTable by passing our data and schema as arguments\n      const fusionTable = fusionDataStore.createDataTable(data, schema);\n      // Afet that we simply mutated our timeseries datasource by attaching the above\n      // DataTable into its data property.\n      const timeseriesDs = Object.assign({}, this.state.timeseriesDs);\n      timeseriesDs.dataSource.data = fusionTable;\n      this.setState({\n        timeseriesDs\n      });\n    });\n  }\n\n  // We are creating the DataTable immidietly after the component is mounted\n  componentDidMount() {\n    this.createDataTable();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <ReactFC {...this.state.timeseriesDs} />\n      </div>\n    );\n  }\n}\n\nexport default InteractiveCandlestickChart;\n",
      "data": "// A shortened version of the data is given here.\n// Please check the link below to see the complete data:\n// https://s3.eu-central-1.amazonaws.com/fusion.store/ft/data/candlestick-chart-data.json\n[\n  [\n    \"1980-12-12\",\n    0.513393,\n    0.515625,\n    0.513393,\n    0.513393,\n    117258400\n  ],\n  [\n    \"1980-12-15\",\n    0.488839,\n    0.488839,\n    0.486607,\n    0.486607,\n    43971200\n  ],\n  [\n    \"1980-12-16\",\n    0.453125,\n    0.453125,\n    0.450893,\n    0.450893,\n    26432000\n  ],\n  [\n    \"1980-12-17\",\n    0.462054,\n    0.464286,\n    0.462054,\n    0.462054,\n    21610400\n  ],\n  [\n    \"1980-12-18\",\n    0.475446,\n    0.477679,\n    0.475446,\n    0.475446,\n    18362400\n  ],\n  [\n    \"1980-12-19\",\n    0.504464,\n    0.506696,\n    0.504464,\n    0.504464,\n    12157600\n  ],\n  [\n    \"1980-12-22\",\n    0.529018,\n    0.53125,\n    0.529018,\n    0.529018,\n    9340800\n  ],\n  [\n    \"1980-12-23\",\n    0.551339,\n    0.553571,\n    0.551339,\n    0.551339,\n    11737600\n  ],\n  [\n    \"1980-12-24\",\n    0.580357,\n    0.582589,\n    0.580357,\n    0.580357,\n    12000800\n  ],\n  [\n    \"1980-12-26\",\n    0.633929,\n    0.636161,\n    0.633929,\n    0.633929,\n    13893600\n  ],\n  [\n    \"1980-12-29\",\n    0.642857,\n    0.645089,\n    0.642857,\n    0.642857,\n    23290400\n  ],\n  [\n    \"1980-12-30\",\n    0.629464,\n    0.629464,\n    0.627232,\n    0.627232,\n    17220000\n  ],\n  [\n    \"1980-12-31\",\n    0.611607,\n    0.611607,\n    0.609375,\n    0.609375,\n    8937600\n  ],\n  [\n    \"1981-01-02\",\n    0.616071,\n    0.620536,\n    0.616071,\n    0.616071,\n    5415200\n  ],\n  [\n    \"1981-01-05\",\n    0.604911,\n    0.604911,\n    0.602679,\n    0.602679,\n    8932000\n  ],\n  [\n    \"1981-01-06\",\n    0.578125,\n    0.578125,\n    0.575893,\n    0.575893,\n    11289600\n  ],\n  [\n    \"1981-01-07\",\n    0.553571,\n    0.553571,\n    0.551339,\n    0.551339,\n    13921600\n  ],\n  [\n    \"1981-01-08\",\n    0.542411,\n    0.542411,\n    0.540179,\n    0.540179,\n    9956800\n  ],\n  [\n    \"1981-01-09\",\n    0.569196,\n    0.571429,\n    0.569196,\n    0.569196,\n    5376000\n  ],\n  [\n    \"1981-01-12\",\n    0.569196,\n    0.569196,\n    0.564732,\n    0.564732,\n    5924800\n  ],\n  [\n    \"1981-01-13\",\n    0.546875,\n    0.546875,\n    0.544643,\n    0.544643,\n    5762400\n  ],\n  [\n    \"1981-01-14\",\n    0.546875,\n    0.549107,\n    0.546875,\n    0.546875,\n    3572800\n  ],\n  [\n    \"1981-01-15\",\n    0.558036,\n    0.5625,\n    0.558036,\n    0.558036,\n    3516800\n  ],\n  [\n    \"1981-01-16\",\n    0.555804,\n    0.555804,\n    0.553571,\n    0.553571,\n    3348800\n  ],\n  [\n    \"1981-01-19\",\n    0.587054,\n    0.589286,\n    0.587054,\n    0.587054,\n    10393600\n  ],\n  [\n    \"1981-01-20\",\n    0.571429,\n    0.571429,\n    0.569196,\n    0.569196,\n    7520800\n  ],\n  [\n    \"1981-01-21\",\n    0.580357,\n    0.584821,\n    0.580357,\n    0.580357,\n    3976000\n  ],\n  [\n    \"1981-01-22\",\n    0.587054,\n    0.591518,\n    0.587054,\n    0.587054,\n    8887200\n  ],\n  [\n    \"1981-01-23\",\n    0.587054,\n    0.589286,\n    0.584821,\n    0.584821,\n    2805600\n  ],\n  [\n    \"1981-01-26\",\n    0.578125,\n    0.578125,\n    0.575893,\n    0.575893,\n    6160000\n  ],\n  [\n    \"1981-01-27\",\n    0.575893,\n    0.575893,\n    0.571429,\n    0.571429,\n    5924800\n  ],\n  [\n    \"1981-01-28\",\n    0.555804,\n    0.555804,\n    0.553571,\n    0.553571,\n    7039200\n  ],\n  [\n    \"1981-01-29\",\n    0.535714,\n    0.535714,\n    0.533482,\n    0.533482,\n    10976000\n  ],\n  [\n    \"1981-01-30\",\n    0.508929,\n    0.508929,\n    0.504464,\n    0.504464,\n    11547200\n  ],\n  [\n    \"1981-02-02\",\n    0.477679,\n    0.477679,\n    0.475446,\n    0.475446,\n    5941600\n  ],\n  [\n    \"1981-02-03\",\n    0.493304,\n    0.495536,\n    0.493304,\n    0.493304,\n    4788000\n  ],\n  [\n    \"1981-02-04\",\n    0.511161,\n    0.513393,\n    0.511161,\n    0.511161,\n    6966400\n  ],\n  [\n    \"1981-02-05\",\n    0.511161,\n    0.515625,\n    0.511161,\n    0.511161,\n    1982400\n  ],\n  [\n    \"1981-02-06\",\n    0.513393,\n    0.515625,\n    0.513393,\n    0.513393,\n    3466400\n  ],\n  [\n    \"1981-02-09\",\n    0.491071,\n    0.491071,\n    0.486607,\n    0.486607,\n    4188800\n  ],\n  [\n    \"1981-02-10\",\n    0.486607,\n    0.488839,\n    0.486607,\n    0.486607,\n    4586400\n  ],\n  [\n    \"1981-02-11\",\n    0.473214,\n    0.473214,\n    0.470982,\n    0.470982,\n    3460800\n  ],\n  [\n    \"1981-02-12\",\n    0.46875,\n    0.46875,\n    0.466518,\n    0.466518,\n    3640000\n  ],\n  [\n    \"1981-02-13\",\n    0.459821,\n    0.459821,\n    0.455357,\n    0.455357,\n    2788800\n  ],\n  [\n    \"1981-02-17\",\n    0.466518,\n    0.46875,\n    0.466518,\n    0.466518,\n    3068800\n  ],\n  [\n    \"1981-02-18\",\n    0.486607,\n    0.491071,\n    0.486607,\n    0.486607,\n    4810400\n  ],\n  [\n    \"1981-02-19\",\n    0.459821,\n    0.459821,\n    0.457589,\n    0.457589,\n    5577600\n  ],\n  [\n    \"1981-02-20\",\n    0.435268,\n    0.435268,\n    0.433036,\n    0.433036,\n    6092800\n  ],\n  [\n    \"1981-02-23\",\n    0.439732,\n    0.441964,\n    0.439732,\n    0.439732,\n    3528000\n  ],\n  [\n    \"1981-02-24\",\n    0.428571,\n    0.428571,\n    0.424107,\n    0.424107,\n    4244800\n  ],\n  [\n    \"1981-02-25\",\n    0.450893,\n    0.453125,\n    0.450893,\n    0.450893,\n    4872000\n  ],\n  [\n    \"1981-02-26\",\n    0.457589,\n    0.459821,\n    0.457589,\n    0.457589,\n    2710400\n  ],\n  [\n    \"1981-02-27\",\n    0.473214,\n    0.477679,\n    0.473214,\n    0.473214,\n    3690400\n  ],\n  [\n    \"1981-03-02\",\n    0.475446,\n    0.477679,\n    0.475446,\n    0.475446,\n    2940000\n  ],\n  [\n    \"1981-03-03\",\n    0.470982,\n    0.470982,\n    0.46875,\n    0.46875,\n    4043200\n  ],\n  [\n    \"1981-03-04\",\n    0.466518,\n    0.466518,\n    0.464286,\n    0.464286,\n    3427200\n  ],\n  [\n    \"1981-03-05\",\n    0.464286,\n    0.464286,\n    0.462054,\n    0.462054,\n    1344000\n  ],\n  [\n    \"1981-03-06\",\n    0.462054,\n    0.462054,\n    0.457589,\n    0.457589,\n    2900800\n  ],\n  [\n    \"1981-03-09\",\n    0.424107,\n    0.424107,\n    0.421875,\n    0.421875,\n    3830400\n  ],\n  [\n    \"1981-03-10\",\n    0.404018,\n    0.404018,\n    0.401786,\n    0.401786,\n    7095200\n  ],\n  [\n    \"1981-03-11\",\n    0.390625,\n    0.390625,\n    0.386161,\n    0.386161,\n    7464800\n  ],\n  [\n    \"2018-09-11\",\n    218.009995,\n    224.300003,\n    216.559998,\n    223.850006,\n    35749000\n  ],\n  [\n    \"2018-09-12\",\n    224.940002,\n    225,\n    219.839996,\n    221.070007,\n    49278700\n  ],\n  [\n    \"2018-09-13\",\n    223.520004,\n    228.350006,\n    222.570007,\n    226.410004,\n    41706400\n  ],\n  [\n    \"2018-09-14\",\n    225.75,\n    226.839996,\n    222.520004,\n    223.839996,\n    31999300\n  ],\n  [\n    \"2018-09-17\",\n    222.149994,\n    222.949997,\n    217.270004,\n    217.880005,\n    37195100\n  ],\n  [\n    \"2018-09-18\",\n    217.789993,\n    221.850006,\n    217.119995,\n    218.240005,\n    31571700\n  ],\n  [\n    \"2018-09-19\",\n    218.5,\n    219.619995,\n    215.300003,\n    218.369995,\n    27123800\n  ],\n  [\n    \"2018-09-20\",\n    220.240005,\n    222.279999,\n    219.149994,\n    220.029999,\n    26608800\n  ],\n  [\n    \"2018-09-21\",\n    220.779999,\n    221.360001,\n    217.289993,\n    217.660004,\n    96246700\n  ],\n  [\n    \"2018-09-24\",\n    216.820007,\n    221.259995,\n    216.630005,\n    220.789993,\n    27693400\n  ],\n  [\n    \"2018-09-25\",\n    219.75,\n    222.820007,\n    219.699997,\n    222.190002,\n    24554400\n  ],\n  [\n    \"2018-09-26\",\n    221,\n    223.75,\n    219.759995,\n    220.419998,\n    23984700\n  ],\n  [\n    \"2018-09-27\",\n    223.820007,\n    226.440002,\n    223.539993,\n    224.949997,\n    30181200\n  ],\n  [\n    \"2018-09-28\",\n    224.789993,\n    225.839996,\n    224.020004,\n    225.740005,\n    22929400\n  ],\n  [\n    \"2018-10-01\",\n    227.949997,\n    229.419998,\n    226.350006,\n    227.259995,\n    23600800\n  ],\n  [\n    \"2018-10-02\",\n    227.25,\n    230,\n    226.630005,\n    229.279999,\n    24788200\n  ],\n  [\n    \"2018-10-03\",\n    230.050003,\n    233.470001,\n    229.779999,\n    232.070007,\n    28654800\n  ],\n  [\n    \"2018-10-04\",\n    230.779999,\n    232.350006,\n    226.729996,\n    227.990005,\n    32042000\n  ],\n  [\n    \"2018-10-05\",\n    227.960007,\n    228.410004,\n    220.580002,\n    224.289993,\n    33580500\n  ],\n  [\n    \"2018-10-08\",\n    222.210007,\n    224.800003,\n    220.199997,\n    223.770004,\n    29663900\n  ],\n  [\n    \"2018-10-09\",\n    223.639999,\n    227.270004,\n    222.25,\n    226.869995,\n    26891000\n  ],\n  [\n    \"2018-10-10\",\n    225.460007,\n    226.350006,\n    216.050003,\n    216.360001,\n    41990600\n  ],\n  [\n    \"2018-10-11\",\n    214.520004,\n    219.5,\n    212.320007,\n    214.449997,\n    53124400\n  ],\n  [\n    \"2018-10-12\",\n    220.419998,\n    222.880005,\n    216.839996,\n    222.110001,\n    40337900\n  ],\n  [\n    \"2018-10-15\",\n    221.160004,\n    221.830002,\n    217.270004,\n    217.360001,\n    30791000\n  ],\n  [\n    \"2018-10-16\",\n    218.929993,\n    222.990005,\n    216.759995,\n    222.149994,\n    29184000\n  ],\n  [\n    \"2018-10-17\",\n    222.300003,\n    222.639999,\n    219.339996,\n    221.190002,\n    22885400\n  ],\n  [\n    \"2018-10-18\",\n    217.860001,\n    219.740005,\n    213,\n    216.020004,\n    32581300\n  ],\n  [\n    \"2018-10-19\",\n    218.059998,\n    221.259995,\n    217.429993,\n    219.309998,\n    33078700\n  ],\n  [\n    \"2018-10-22\",\n    219.789993,\n    223.360001,\n    218.940002,\n    220.649994,\n    28792100\n  ],\n  [\n    \"2018-10-23\",\n    215.830002,\n    223.25,\n    214.699997,\n    222.729996,\n    38767800\n  ],\n  [\n    \"2018-10-24\",\n    222.600006,\n    224.229996,\n    214.539993,\n    215.089996,\n    40925500\n  ],\n  [\n    \"2018-10-25\",\n    217.710007,\n    221.380005,\n    216.75,\n    219.800003,\n    29855800\n  ],\n  [\n    \"2018-10-26\",\n    215.899994,\n    220.190002,\n    212.669998,\n    216.300003,\n    47258400\n  ],\n  [\n    \"2018-10-29\",\n    219.190002,\n    219.690002,\n    206.089996,\n    212.240005,\n    45935500\n  ],\n  [\n    \"2018-10-30\",\n    211.149994,\n    215.179993,\n    209.270004,\n    213.300003,\n    36660000\n  ],\n  [\n    \"2018-10-31\",\n    216.880005,\n    220.449997,\n    216.619995,\n    218.860001,\n    38358900\n  ],\n  [\n    \"2018-11-01\",\n    219.050003,\n    222.360001,\n    216.809998,\n    222.220001,\n    58323200\n  ],\n  [\n    \"2018-11-02\",\n    209.550003,\n    213.649994,\n    205.429993,\n    207.479996,\n    91328700\n  ],\n  [\n    \"2018-11-05\",\n    204.300003,\n    204.389999,\n    198.169998,\n    201.589996,\n    66163700\n  ],\n  [\n    \"2018-11-06\",\n    201.919998,\n    204.720001,\n    201.690002,\n    203.770004,\n    31882900\n  ],\n  [\n    \"2018-11-07\",\n    205.970001,\n    210.059998,\n    204.130005,\n    209.949997,\n    33424400\n  ],\n  [\n    \"2018-11-08\",\n    209.979996,\n    210.119995,\n    206.75,\n    208.490005,\n    25362600\n  ],\n  [\n    \"2018-11-09\",\n    205.550003,\n    206.009995,\n    202.25,\n    204.470001,\n    34365800\n  ],\n  [\n    \"2018-11-12\",\n    199,\n    199.850006,\n    193.789993,\n    194.169998,\n    51135500\n  ],\n  [\n    \"2018-11-13\",\n    191.630005,\n    197.179993,\n    191.449997,\n    192.229996,\n    46882900\n  ],\n  [\n    \"2018-11-14\",\n    193.899994,\n    194.479996,\n    185.929993,\n    186.800003,\n    60801000\n  ],\n  [\n    \"2018-11-15\",\n    188.389999,\n    191.970001,\n    186.899994,\n    191.410004,\n    46478800\n  ],\n  [\n    \"2018-11-16\",\n    190.5,\n    194.970001,\n    189.460007,\n    193.529999,\n    36208500\n  ]\n]"
    }
  }
}
